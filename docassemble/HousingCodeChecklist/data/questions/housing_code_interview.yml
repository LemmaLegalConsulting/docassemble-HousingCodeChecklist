---
translations:
  - housing_code_interview_es.xlsx
  - housing_code_interview_pt.xlsx
  - housing_code_interview_ht.xlsx
---
include:
  - docassemble.AssemblyLine:al_package.yml
  - Repair_Demand_Letter_to_include.yml
  - verified_complaint_and_motions_to_include.yml
  - docassemble.SanitaryCode:sanitary_code_template.yml
  - docassemble.RentalRepairLetter:Repair_Letter_Tenant.yml
  - customized_screens.yml 
  - language.yml 
  - simple_conditions.yml
---
features:
  bootstrap theme: bootstrap.min.css
---
metadata:
  title: |-
    MADE: UpToCode
  authors:
    - Quinten Steenhuis
    - Michael Cronin
    - Joelle Ataya
    - Cherise Barandao
    - Christopher Selak    
    - Michael Carroll
    - Maeve MacGlinchey
    - Caroline Robinson
    - Plocket
    - Kate Barry
    - Lily Yang
    - Matthew Brooks
    - Lance Godard
    - Kendall Garner
    - David Colarusso
    - Sofija Belacjic

  title url: |
    https://madeuptocode.org
  tags:
    - HO-00-00-00-00
comment: |
  Some of the documents that this interview assembles
  use work done as part of the Assembly Line project.
---
default screen parts:
  logo: |
    <img src="${ uptocode_logo.url_for() }"><div class="title"></div>
  short logo: |
    <img src="${ uptocode_logo.url_for() }"><div class="title"></div>
---
id: patch interview stats pre 1.11.0
event: cron_daily
code: |
  if task_not_yet_performed('update_saved_statistics'):
    reconsider('snapshot_interview_state')
    mark_task_as_performed('update_saved_statistics')
  # Consider removing after 1/15/2022
---
objects:
  - document_problems_image: DAStaticFile.using(filename="dripping_faucet.jpg")
  - notify_image: DAStaticFile.using(filename="typewriter_luca-onniboni-4v9Kk01mEbY-unsplash1.jpg")
  - help_in_court_image: DAStaticFile.using(filename="gavel_wesley-tingey-9z9fxr_7Z-k-unsplash_Cropped.jpg")
  - eviction_image: DAStaticFile.using(filename="apartments_anders-holm-jensen-urYCLa2G4Lg-unsplash_Cropped.jpg")
  - uptocode_logo: DAStaticFile.using(filename="horiztonal-white1.5x_blue.svg")
---
event: initial_action_display_cards
id: landing-page
question: |
  You deserve a safe and decent home
subquestion: |
  Need help getting repairs in Massachusetts? Choose a task below to get started.
  
  <div class="row row-cols-1 row-cols-md-2 g-4">
    <div class="col">
      <div class="card h-100">
        <img src="${ document_problems_image.url_for() }" class="card-img-top" alt="...">
        <div class="card-body">
          <h5 class="card-title" >Document problems</h5>
          <p class="card-text">Use our checklist to document problems room by room.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="document_by_room") }" role="button">Explore room by room</a>
        </div>
      </div>
    </div>
    <div class="col">
      <div class="card h-100">
        <img src="${ notify_image.url_for() }" class="card-img-top" alt="...">
        <div class="card-body">
          <h5 class="card-title">Tell your landlord or city</h5>
          <p class="card-text">Answer simple questions to give your landlord or the city legal notice of the problems.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="give_notice") }" role="button">Write a letter</a>
        </div>
      </div>
    </div>
    <div class="col">
      <div class="card h-100">
        <img src="${ help_in_court_image.url_for() }" class="card-img-top" alt="...">
        <div class="card-body">
          <h5 class="card-title">Get help in court</h5>
          <p class="card-text">Sue your landlord or ask a judge to order an emergency repair.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="help_in_court") }" role="button">Get help from a judge</a>
        </div>      
      </div>
    </div>
    <div class="col">
      <div class="card h-100">
        <img src="${ eviction_image.url_for() }" class="card-img-top" alt="...">
        <div class="card-body">
          <h5 class="card-title">Defend against an eviction</h5>
          <p class="card-text">Getting evicted? Stop the eviction before you do anything else.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="https://interviews.gbls.org/start/eviction/" role="button">Defend against an eviction</a>
        </div>
      </div>
    </div>
  </div>
---
continue button field: intro_and_terms_of_use
question: |
  How this site works
subquestion: |
  1. List your housing problems.
  1. Choose a solution, like sending a letter or going to court.
  1. Answer short questions.
  1. Print and deliver your documents.

  <div class="alert alert-primary" role="alert">
    <h5 class="alert-heading"><i class="fa-solid fa-circle-info"></i> Did you know?</h5>
    <p>
    It is against the law for your landlord to "retaliate" against you. For example,
    your landlord cannot evict you or raise your rent because you complain
    about problems in your house. <a href="https://www.masslegalhelp.org/when-is-eviction-illegal">Read more</a>.
    </p>
  </div>
fields:  
  - To continue, you must accept the [terms of use](https://www.gbls.org/self-help/eviction/terms-of-use): acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.
---
event: initial_action
code: |
  initial_action_selection = action_argument("selection")
  initial_action_display_cards = True
---
language: en
comment: |
  Section labels for child interviews that have follow-up
  questions
variable name: sub_documents
data: !!omap
  - get_report:
      section_link: review_checklist
      section_label: My checklist
      name: Housing Code Checklist and Condition Report
      count: 2
  - tell_landlord: 
      section_link: review_tenant_repair_request
      section_label: Tell my landlord
      name: Letter to landlord to report bad conditions
      count: 2
  - demand_letter_93a:
      section_link: review_Repair_Demand_Letter
      section_label: Write a demand letter
      name: Consumer protection demand letter
      count: 2
  #- share_with_tenants:
  #    section_link: review_share_with_tenants
  #    section_label: Tell other tenants
  #    name: Share your information with other tenants
  #    count: 0
  - organize_tenants:
      section_link: organizing_interstitial
      section_label: Organize    
      name: Organize with other tenants
      count: 0
  - get_inspection: 
      section_link: review_request_housing_inspection
      section_label: Get an inspection
      name: Request a city inspection
      count: 2
  - enforce_inspection: 
      section_link: review_sanitary_code_template
      section_label: Enforce an inspection
      name: Ask a judge to enforce a city inspection
      count: 2
  - fix_problems:
      section_link: review_repair_and_deduct
      section_label: Fix the problems myself
      name: Make repairs and deduct the cost from my rent
      count: 0
  #- get_injunction:
  #    section_link: review_housing_tro
  #    section_label: Get a judge's order
  #    name: Ask a judge for an injunction (order)
  #    count: 8
  - sue_landlord:
      section_link: review_verified_complaint_and_motions
      section_label: Sue my landlord
      name: Sue my landlord in court
      count: 0
---
language: en
sections:
  - section_getting_started: Getting started
  - review_conditions: List problems
  - document_choice: Choose a solution
  - provide_details: Answer questions
  - preview_and_sign: Preview and sign
  - download_conditions_checklist_docs: Download
auto open: True  
---
modules:
  - .load_data
  - docassemble.ALToolbox.misc  
---
mandatory: True
id: interview order
code: |
  initial_action_display_cards
  intro_and_terms_of_use
  person_answering
  users[0].name.first
  starting_task
  snapshot_interview_state
  nav.set_section('review_conditions')
  bad_conditions["common problems"].claims
  for claim in bad_conditions["common problems"].claims.true_values():
    bad_conditions["common problems"].details[claim].condition_existed_at_start
  if wants_detailed_conditions:
    # go to the opening screen first, instead of asking "is there another" question
    bad_conditions.gather()
    if bad_conditions.count_conditions() > 0:
      # This is a bit of a workaround
      for room in bad_conditions:
        for condition in bad_conditions[room].claims.true_values():
          bad_conditions[room].details[condition].condition_existed_at_start  
      review_conditions
    else:
      warn_add_conditions
  else:
    bad_conditions.gathered = True
  nav.set_section('document_choice')
  screen_ll_knows_problem
  reconsider('snapshot_interview_state')
  nav.set_section('provide_details')  
  if not screen_ll_knows_problem:
    update_sections_with_selected_documents
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    users[0].address.address
    try:
      users[0].address.geocode()
    except:
      pass
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    organizing_interstitial
  else:
    explain_documents
    update_sections_with_selected_documents  
  if screen_ll_knows_problem and document_choice['get_report']:
    nav.set_section(sub_documents['get_report'].get('section_link'))
    users[0].address.address
    other_parties.gather()
    other_parties[0].address.address
  if screen_ll_knows_problem and document_choice['tell_landlord']:
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    interview_order_tenant_repair_request
  #if screen_ll_knows_problem and document_choice['share_with_tenants']:
  #  nav.set_section(sub_documents['share_with_tenants'].get('section_link'))
  #  explain_sharing
  #  store_for_tenant_sharing
  if screen_ll_knows_problem and document_choice['organize_tenants']:
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    users[0].address.address
    try:
      users[0].address.geocode()
    except:
      pass
    organizing_interstitial
  if screen_ll_knows_problem and document_choice['get_inspection']:
    nav.set_section(sub_documents['get_inspection'].get('section_link'))
    interview_order_request_housing_inspection
  if screen_ll_knows_problem and screen_contacted_housing_inspector and document_choice.get('enforce_inspection'):
    nav.set_section(sub_documents['enforce_inspection'].get('section_link'))
    sanitary_code_template
  # if screen_ll_knows_problem and document_choice['get_injunction']:
  #   nav.set_section(sub_documents['get_injunction'].get('section_link'))
  #   interview_order_Housing_Temporary_Restraining_Order0002
  if screen_ll_knows_problem and document_choice['demand_letter_93a']:
    nav.set_section(sub_documents['demand_letter_93a'].get('section_link'))
    if is_landlord_subject_to_93a:
      interview_order_Repair_Demand_Letter
    else:
      landlord_is_not_subject_to_93a
  if screen_ll_knows_problem and document_choice['sue_landlord']:
    nav.set_section(sub_documents['sue_landlord'].get('section_link'))
    interview_order_verified_complaint_and_motions
  # if screen_ll_knows_problem and {'enforce_inspection','get_inspection','get_injunction', 'tell_landlord'}.intersection(document_choice.true_values()):
  if screen_ll_knows_problem and {'enforce_inspection','get_inspection', 'tell_landlord'}.intersection(document_choice.true_values()):
     nav.set_section('preview_and_sign')
     preview_conditions_checklist_docs
     basic_questions_signature_flow     
  reached_download_screen = True
  reconsider('snapshot_interview_state')
  nav.set_section('download_conditions_checklist_docs')
  download_conditions_checklist_docs
---
depends on:
  - user_language
  - screen_ll_knows_problem
  - document_choice
code: |
  new_sections = []
  if screen_ll_knows_problem:
    for document in sub_documents:
      if document in document_choice.true_values():
        new_sections.append({
          sub_documents[document].get('section_link'):  sub_documents[document].get('section_label')
        })
  else:
    new_sections.append({sub_documents['tell_landlord'].get('section_link'): sub_documents['tell_landlord'].get('section_label')})
  old_nav = nav.get_sections()
  
  position = 3 # Current, hardcoded position in the list
  position_label = 'Answer questions'
  for index, item in enumerate(old_nav):
    if next(iter(item)) == 'provide_details':
      position = index
      position_label = next(iter(item.values()))
  old_nav[position] = {position_label: new_sections}

  nav.set_sections(old_nav)

  update_sections_with_selected_documents = True
---
code: |
  stuff_to_snapshot = {
     'start_time': str(start_time().format('yyyy-MM-dd')),
     'address_city': showifdef('users[0].address.city'),
     'zip': showifdef('users[0].address.zip'),
     'language': user_language,
     }    
  try:  
    stuff_to_snapshot['document_choice'] = comma_list(document_choice.true_values())
    stuff_to_snapshot['reached_document_choice_screen'] = True
  except:
    pass  
  flattened_conditions = []
  for category in bad_conditions.complete_elements():
    flattened_conditions.extend(bad_conditions[category].claims.true_values())

  stuff_to_snapshot['bad_conditions'] = comma_list(flattened_conditions)
  if defined('reached_download_screen'):
    stuff_to_snapshot['reached_download_screen'] = True
  
  log(stuff_to_snapshot)
  store_variables_snapshot(
      data=stuff_to_snapshot, persistent=True
     )
  snapshot_interview_state = True
  log('saved the snapshot')
---
id: launch made
continue button field: launch_made
question: |
  Stop your eviction
subquestion: |
  Click the link below to start using MADE, Massachusetts Defense
  for Eviction in a new window.
  
  When you are finished, you can come back here.
  
  ${ action_button_html('https://interviews.gbls.org/start/eviction', label='Launch MADE') } 
---
features:
  navigation back button: False
  css:
    - docassemble.ALToolbox:collapse_template.css
    - styles.css
  javascript:
    - back_button.js
  #navigation: horizontal    
  small screen navigation: dropdown
  progress bar: False
---
objects:
  - dataloader: DataLoader.using(filename="housing_code_checklist.xlsx")
  - bad_conditions: ConditionsDict.using(there_are_any=True)
---
depends on:
  - bad_conditions[i].claims
code: |
  bad_conditions[i].claims
  bad_conditions[i].df
  for condition in bad_conditions[i].claims.true_values():
    bad_conditions[i].details[condition].condition_existed_at_start
  bad_conditions[i].complete = True
---
code: |  
  bad_conditions[i].details[j].condition_existed_at_start
  bad_conditions[i].details[j].complete = True
---
#features:
#  question back button: False
---
template: what_problems_can_be_solved
subject: |-
  What can I do?
content: |-
  You can choose what to do. We can help you:

  * Let your landlord know about the problem.
  * Call a housing inspector.
  * Ask a judge to order your landlord to fix the problems.
  * Sue your landlord in court.
  
  ${ action_button_html(url_action('learn_more'), label="Read more first") }  
---
id: intro affirmation
question: |
  % if person_answering == "tenant":
  ${ users.familiar() }, you can do this!
  % else:
  Let's get started helping ${ users.familiar() }!
  % endif
subquestion: |  
  #### How this works
  
  This website will help you solve problems with bad conditions in your home.
  <div class="custom-counter">
  <ol class="custom-counter">
  <li>Read about your landlord's responsibilities.</li>
  <li>Track the problems you have in each room of your home.</li>
  <li>Upload photos or add other information about each problem.</li>
  <li>Choose a next step to get your landlord to fix the problems.</li>
  </ol>
  </div>
  
  ${ collapse_template(what_problems_can_be_solved) }
  
continue button field: starting_task  
continue button label: Get started
css: |
  <style>
    .custom-counter ol {
    margin: 0;
    padding: 0;
    list-style-type: none;
    }

    .custom-counter li {
    counter-increment: step-counter;
    margin-bottom: 10px;
    }

    .custom-counter li::before {
    content: counter(step-counter);
    margin-right: 5px;
    font-size: 80%;
    background-color: black;
    color: white;
    font-weight: bold;
    padding: 3px 8px;
    border-radius: 50%;
    }
    
    /* List number counter sizes to match circles in nav items (in styles.css). If one is adjusted, the other will have to be adjusted also. */
    .custom-counter li::before {
      padding: 0.5px 6.5px;
    }
  </style>  

---
id: track conditions intro
question: |
  Track your housing problems
subquestion: |
  This website will help you track.
continue button field: track_conditions_intro  
---
id: learn more
question: |
  Solve your housing problems
subquestion: | 
  ${ collapse_template(how_to_defend_eviction_template) }
  ${ collapse_template(how_to_document_template) }
  ${ collapse_template(how_to_notify_landlord_template) }
  ${ collapse_template(get_inspection_template) }
  ${ collapse_template(sue_your_landlord_template) } 
#  ${ collapse_template(get_injunction_template) }
continue button field: learn_more
---
id: simple conditions
question: |
  Do you have any of the problems listed below?
subquestion: |
  This is a list of common problems that tenants have. Tap the 
  question mark icon to get more information about each
  problem.
fields:
  - What problems do you have?: bad_conditions["common problems"].claims
    datatype: checkboxes
    code: |
      conditions_from_list(dataloader, simple_conditions_list, language=user_language)
  - note: |
      Don't see your problem on this list? There are more problems
      to pick from if you keep going.
---
id: review simple conditions
question: |
  Do you want to keep exploring problems?
subquestion: |
  % if bad_conditions["common problems"].claims.any_true():
  % if len(bad_conditions["common problems"].claims.true_values()) > 1:
  You have picked ${ len(bad_conditions["common problems"].claims.true_values()) } problems
  so far.
  % else:
  You have picked 1 problem so far.
  % endif
  % endif  
  You can keep exploring problems room by room, or skip ahead
  to start working on a solution.

  ${ collapse_template(how_many_problems_are_there_template)}

fields:
  - Keep exploring problems?: wants_detailed_conditions
    datatype: radio
    choices:
      - Yes, explore problems I may have in each room: True
      - No, go straight to a solution: False
---
template: how_many_problems_are_there_template
subject: |
  How many problems can you help me with?
content: |
  If you explore room by room, you can pick from a list of about
  150 problems. Some may be problems you did not know your
  landlord needs to fix.

  The list comes from the Massachusetts sanitary code. We have
  translated the sanitary code into easier to understand sentences
  with short explanations.
---  
# WARNING: This page id needs to stay the same or the selectors for
# the button styles in styles.css will need to be updated to match
id: room chooser
question: |
  Your landlord's responsibilities
subquestion: |
  % if len(bad_conditions):
  You have already listed problems in these rooms:
  
  % for button in bad_conditions:
  * [:pencil-alt: ${ str(button).capitalize() }](${ url_action('bad_conditions["' + button + '"].claims') } )
  % endfor
  % else:
  Your home is protected by the [state sanitary 
  code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download). 
  Click the buttons below to learn what a safe home means in different categories.
  % endif
field: bad_conditions.new_item_name
buttons:
  code: |
    [button for button in available_buttons if next(iter(button)) not in bad_conditions ]
back button label: |
  Back
post: |
  % if len(bad_conditions.elements):
  ${ action_button_html(url_ask('set_gathered'), label="Skip and continue", color="primary", size="md") }
  % endif
---
code: |
  bad_conditions.gathered = True
  set_gathered = True
---
depends on:
  - user_language
language: en
variable name: available_buttons
data:
  - emergency: Emergency
    image: first-aid
  - Living area: Living area  
    image: couch
  - Bathroom: Bathroom
    image: bath
  - Kitchen: Kitchen
    image: utensils        
  - Bedroom: Bedroom    
    image: bed    
  - Porch and balcony: Porch and balcony
    image: store    
  - Exits: Exits
    image: door-open
  - Lead paint: Lead Paint
    image: paint-roller    
  - Safety: Safety
    image: unlock-alt        
  - Heat: Heating
    image: thermometer-full
  - Lighting: Lighting
    image: lightbulb    
  - Ventilation and Light: Ventilation and light
    image: sun    
  - Electricity and Gas: Electricity and Gas
    image: plug
  - Water: Water
    image: faucet    
  - Garbage: Garbage
    image: trash-alt
  - Rodents and insects: Rodents and insects
    image: bug
  - Building Structure: Building Structure
    image: hard-hat        
  - General Maintenance: General maintenance
    image: tools
---
if: |
  i == 'emergency'
undefine:
  - bad_conditions[i].df  
  - bad_conditions[i].complete
id: Claims
question: |
  Emergency problems
subquestion: |
  Your landlord should start fixing any problem listed below within 24 hours
  of learning about the problem.
  
  If you do not see your problem listed below, try a different category.
fields:
  - no label: bad_conditions[i].claims
    datatype: checkboxes
    required: False
    code: |
      conditions_with_help(dataloader, "24 hours", search_column="Deadline", language=user_language)
    default:
      code: |
        bad_conditions[i].claims.true_values() if defined('bad_conditions[i].claims') else [] + bad_conditions["common problems"].claims.true_values()
help: 
  label: |
    Sanitary Code
  content: |
    The problems listed above are cited in the following sections of the
    [sanitary code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
        
    Problem | Sanitary Code
    --------|------------------
    % for row in dataloader.get_rows(allowed_types=["24 hours"], filter_column="Deadline").iterrows():
    ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] }
    % endfor
---
if:
  i != 'emergency'
undefine:
  - bad_conditions[i].df
  - bad_conditions[i].complete  
id: Non-emergency claims
question: |
  Problems with ${ i }
fields:
  - no label: bad_conditions[i].claims
    datatype: checkboxes
    required: False
    code: |
      conditions_with_help(dataloader, i, language=user_language)
    default:
      code: |
        bad_conditions[i].claims.true_values() if defined('bad_conditions[i].claims') else []  + bad_conditions["common problems"].claims.true_values()
help: 
  label: |
    Sanitary Code
  content: |
    The problems listed above are cited in the following sections of the
    [sanitary code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
        
    Problem | Sanitary Code
    --------|------------------
    % for row in dataloader.get_rows(allowed_types=[i], filter_column="Category").iterrows():
    ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] }
    % endfor        
---
id: there is another condition
question: |
  Do you want to list problems in another category?
subquestion: |
  So far you have reviewed problems in ${ comma_and_list([f'"{str(key).capitalize()}"' for key in bad_conditions.keys()]) }.
  
  Tap "yes" if you want to look at problems in another category.
yesno: bad_conditions.there_is_another
---
code: |
  # available buttons doesn't include the "short" list
  if len(bad_conditions.complete_elements()) >= len(available_buttons) + 1: 
    bad_conditions.there_is_another = False
---
code: |
  if wants_detailed_conditions and len(bad_conditions.complete_elements()) == 1:
    bad_conditions.there_is_another = True
---
depends on:
  - bad_conditions[i].claims
code: |
  bad_conditions[i].df = dataloader.load_rows(bad_conditions[i].claims.true_values())
---
continue button field: review_conditions
id: review conditions
question: |
  Here is what you told us so far
subquestion: |  
  ${ review_conditions_template }
---
template: review_conditions_template
content: |
  % if len(bad_conditions.elements): 
  Click a category below to revisit your choices.
  Click a problem to edit the time the problem started, upload evidence,
  and make other changes.
  
  % for category in bad_conditions.elements:
  #### [:pencil-alt: ${ category.title() if not category is None else 'None' }](${ url_action('bad_conditions["' + str(category) + '"].claims') })
  
  % for index, row in bad_conditions[category].df.iterrows():
  * [:pencil-alt: ${ row['Interview description'] }](${ url_action(f'bad_conditions["{str(category)}"].details["{str(index)}"].condition_existed_at_start')})
  % endfor
  % endfor
  % endif
  
  % if len(bad_conditions) < len(available_buttons):
  ${ bad_conditions.add_action() }
  % endif
---
event: warn_add_conditions
question: |
  You haven't added any problems yet
subquestion: |
  You should add at least one problem to continue.
  % if len(bad_conditions): 
  
  Click a category below to revisit your selections.  
  % endif  
  % for category in bad_conditions:
  #### [${ category.title() if not category is None else 'None' }](${ url_action('bad_conditions["' + str(category) + '"].claims') })
  
  % for index, row in bad_conditions[category].df.iterrows():
  * ${ row['Interview description'] }
  % endfor
  % endfor  
  
  % if len(bad_conditions) < len(available_buttons):
  ${ bad_conditions.add_action() }
  % endif
---
id: triage
question: |
  Deciding on your next steps
fields:
  - Do you have an active eviction case in court?: screen_tenant_facing_eviction
    datatype: yesnoradio
    help: |
      Answer "yes" if:
      
      - you have a case that is already in court, or
      - you have a "Summons and Complaint" from your landlord with a court date coming up
      
      Answer "no" if:
      
      - the eviction case is already over, or
      - you only have a "Notice to Quit" or "Notice to Terminate Tenancy"
  - note: |
      **Make sure you respond to the eviction.** You can use [MADE](https://gbls.org/MADE) to 
      stop the eviction case. You shouldn't start a new court case with UpToCode.
    show if: screen_tenant_facing_eviction
  - Does your landlord already know about at least one of the problems in your home?: screen_ll_knows_problem
    datatype: yesnoradio
  - note: |
      **Okay.** Your first step should be to tell your landlord about the
      problem. We can help you write a letter to tell your landlord and put
      them on legal notice.
    show if:
      variable: screen_ll_knows_problem
      is: False
  - Is your landlord refusing to fix the problems?: screen_ll_refusing_to_fix
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **You may want to give your landlord time.** Some serious problems
      need to be fixed in 24 hours, and others in 5 days. Other problems
      can be fixed in up to 30 days.
      
      If you have not given your landlord enough time to fix the problem yet,
      you may want to wait before you get help from a court. But it is up
      to you.
    show if:
      variable: screen_ll_refusing_to_fix
      is: False
  - Are other tenants in your building also having housing problems?: screen_other_tenants_with_problem
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **${ users.familiar() }, you and your neighbors are stronger together**. You have the right to **organize**
      with other tenants to fight the bad housing conditions.
    show if: screen_other_tenants_with_problem
  - Have you requested an inspection from the city about the most recent problem?: screen_contacted_housing_inspector       
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **You may want to get an inspection.** You are not required to get a
      housing inspection. But it can help a judge understand the problems
      better. You do not need to wait for the inspection to get more help.
    show if:
      variable: screen_contacted_housing_inspector
      is: False
  - note: |
      **What would you like to do?**    
      Remember, you have the right not to be {retaliated} against.
    show if: screen_ll_knows_problem      
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_ll_knows_problem") && val("screen_contacted_housing_inspector")
    choices:
      - Save or print a copy of my checklist for later: get_report
      - Tell my landlord about the problems: tell_landlord
      - Organize with my neighbors or other tenants in my city: organize_tenants
      #- Let other tenants know about my bad landlord: share_with_tenants
      #  help: |
      #    This will share your address and landlord's name, but not your name
      #    or apartment number.
      - Get a city inspection: get_inspection
      # - Withhold rent: withhold_rent
      #- Fix the problems myself and deduct money from my rent: fix_problems
      # TODO(41): low priority
      - Ask a judge to enforce an order from a housing inspector: enforce_inspection
      #- Ask a judge to order my landlord to fix the problem: get_injunction
      - Ask for a fair settlement (consumer protection demand letter): demand_letter_93a
      - Sue my landlord for money or to get an emergency order: sue_landlord
    default:
      - get_report
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_ll_knows_problem") && !val("screen_contacted_housing_inspector")
    choices:
      - Save or print a copy of my checklist for later: get_report
      - Tell my landlord about the problems: tell_landlord
      - Organize with my neighbors or other tenants in my city: organize_tenants
      #- Let other tenants know about my bad landlord: share_with_tenants
      #  help: |
      #    This will share your address and landlord's name, but not your name
      #    or apartment number.
      - Get a city inspection: get_inspection
      # - Withhold rent: withhold_rent
      #- Fix the problems myself and deduct money from my rent: fix_problems
      - Ask a judge to order my landlord to fix the problem: get_injunction
      - Ask for a fair settlement (consumer demand letter): demand_letter_93a
      - Sue my landlord for money or to get an emergency order: sue_landlord
    none of the above: False
    default:
      - get_report

validation code: |
  if screen_ll_knows_problem and len(document_choice.true_values()) < 1:
    validation_error("Select at least one.", field="document_choice")
terms:
  retaliated: |
    Retaliation could include evicting you or raising your rent because you
    complained about housing problems. Retaliation is illegal and you have
    protections in a court.
---
id: interview_order_request_housing_inspection
code: |
  users[0].name.first
  users[0].address.address
  try:
    users[0].address.geocode()
  except:
    pass
  other_parties[0].name.first
  other_parties[0].address.address
  interview_order_request_housing_inspection = True
---
id: preview_conditions_checklist_docs
continue button field: preview_conditions_checklist_docs
question: |
  Review your documents before you sign
subquestion: |
  Tap to open the document below in a new window.
  
  If you need to make any changes, tap the navigation labels
  to revisit the section you want to change.
  
  When you are ready, click "next" to add your signature.
  
  % if screen_ll_knows_problem:
  ${ housing_code_bundle.as_pdf(key='preview') }

  % else:
  ${ tenant_repair_letter_bundle.as_pdf(key='preview') }
  
  % endif
---
id: download_conditions_checklist_docs
event: download_conditions_checklist_docs
question: |
  Your documents are ready
subquestion: |
  
  1. Download and print your documents below. You can also send yourself
  or someone else a copy of the documents in an email.
  1. Read the instructions to learn how to file and deliver your
  documents.
  % if defined('trial_court'):
  1. Deliver the court forms to the ${ trial_court } at ${ trial_court.address.on_one_line() }. You can call for instructions at ${ tel(trial_court.phone_number) }.
  % endif
  1. You can come back to this website later to take additional steps.

  % if screen_ll_knows_problem and len(housing_code_bundle.enabled_documents()) > 0:
  ${ housing_code_bundle.download_list_html(format="docx") }

  ${ housing_code_bundle.send_button_html() }
  % elif len(tenant_repair_letter_bundle.enabled_documents()) > 0: 
  ${ tenant_repair_letter_bundle.download_list_html(format="docx") }
  
  ${ tenant_repair_letter_bundle.send_button_html() }
  % endif  
  % if screen_ll_knows_problem and document_choice['sue_landlord']:
  
  ${ affirmative_complaint_bundle.download_list_html(format="docx") }
  
  ${ affirmative_complaint_bundle.send_button_html() }
  
  % endif
---
template: housing_code_bundle.send_email_template
subject: |
  ${ users.familiar() }, 
  % if len(housing_code_bundle.enabled_documents()) > 1:
  your documents from UpToCode are ready
  % else:
  your document from UpToCode is ready
  % endif
content: |
  Thank you for using UpToCode!

  We are attaching a copy of the documents that you worked on. Keep this for
  your records.

  Learn more at [madeuptocode.org](https://madeuptocode.org)
---
template: tenant_repair_letter_bundle.send_email_template
subject: |
  ${ users.familiar() }, 
  % if len(tenant_repair_letter_bundle.enabled_documents()) > 1:
  your documents from UpToCode are ready
  % else:
  your document from UpToCode is ready
  % endif
content: |
  Thank you for using UpToCode!

  We are attaching a copy of the documents that you worked on. Keep this for
  your records.

  Learn more at [madeuptocode.org](https://madeuptocode.org)
---
template: affirmative_complaint_bundle.send_email_template
subject: |
  ${ users.familiar() }, 
  % if len(tenant_repair_letter_bundle.enabled_documents()) > 1:
  your documents from UpToCode are ready
  % else:
  your document from UpToCode is ready
  % endif
content: |
  Thank you for using UpToCode!

  We are attaching a copy of the documents that you worked on. Keep this for
  your records.

  To get help from a judge, you also need to file a copy with ${ trial_court }
  and deliver a copy to your landlord. Read the attached documents for more
  instructions.

  Learn more at [madeuptocode.org](https://madeuptocode.org)
---
id: details for this claim
question: |
  More information about "${ str(bad_conditions[i].df.loc[j]['Interview description']).lower().lstrip() }"
fields:
  - Describe the problem using your own words (optional): bad_conditions[i].details[j].description
    datatype: area
    required: False    
  - Was the problem there when you moved in?: bad_conditions[i].details[j].condition_existed_at_start
    datatype: yesnoradio
  - note: |
      **When did the problem start?**

      Enter as much of the date as you know.
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - Year: bad_conditions[i].details[j].start_year
    datatype: integer
    code: |
      list(range(today().year, today().year - 20 - 1, -1))
    help: |
      Problems that started in the last **6** years are the most important to
      report, but use the closest year that you know even if it was older than 6
      years ago.
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - Month: bad_conditions[i].details[j].start_month
    datatype: integer
    required: False
    choices:
      - January: 1
      - February: 2
      - March: 3
      - April: 4
      - May: 5
      - June: 6
      - July: 7
      - August: 8
      - September: 9
      - October: 10
      - November: 11
      - December: 12
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - Day: bad_conditions[i].details[j].start_day
    datatype: integer
    code: |
      range(1,31+1)
    required: False
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - The problem is fixed: bad_conditions[i].details[j].condition_ended
    datatype: yesno
  - Date problem ended: bad_conditions[i].details[j].end_date
    max: ${ today().format("yyyy-MM-dd") }  
    datatype: date
    show if: bad_conditions[i].details[j].condition_ended
  - Take or upload a photo: bad_conditions[i].details[j].has_file_to_upload
    datatype: yesno
  - Add a photo or other proof of the problem, if you have it: bad_conditions[i].details[j].files
    datatype: files
    required: False
    image upload type: jpeg
    accept: |
      "image/*,image/png,image/jpeg,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"       
    show if: bad_conditions[i].details[j].has_file_to_upload
validation code: |
  # Transform the approximate date into a real DADateTime object
  if not bad_conditions[i].details[j].condition_existed_at_start:
    bad_conditions[i].details[j].start_date = today()
    try:
      if bad_conditions[i].details[j].start_year:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(year=bad_conditions[i].details[j].start_year)
      if bad_conditions[i].details[j].start_month:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(month=bad_conditions[i].details[j].start_month)
      else:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(month=1)
      if bad_conditions[i].details[j].start_day:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(day=bad_conditions[i].details[j].start_day)
      else:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(day=1)
    except ValueError:
      validation_error(f"The date {bad_conditions[i].details[j].start_month or 1}/{bad_conditions[i].details[j].start_day or 1}/{bad_conditions[i].details[j].start_year} is not a valid date. Check the day of the month or leave it blank.", field="bad_conditions[i].details[j].start_day")
---
id: your address
question: |
  What is your landlord's address?
fields:
  - I do not know my landlord's address: ll_address_unknown
    datatype: yesno
  - note: |
      **Okay**. You need your landlord's address for many of the forms on
      this website. You can still finish this form but you will need to add
      your landlord's address before you deliver the form.
    show if: ll_address_unknown       
  - Street address: other_parties[0].address.address
    address autocomplete: True
    hide if: ll_address_unknown
  - Unit: other_parties[0].address.unit
    required: False
    hide if: ll_address_unknown    
  - City: other_parties[0].address.city
    hide if: ll_address_unknown  
  - State: other_parties[0].address.state
    hide if: ll_address_unknown  
    code: |
      states_list()
    default: MA      
  - Zip: other_parties[0].address.zip
    required: False
    hide if: ll_address_unknown
validation code: |
  if ll_address_unknown:
    other_parties[0].address.address = "[ Landlord's address ]"
    other_parties[0].address.city = "[ Landlord's city ]"
---
id: explain_documents
continue button field: explain_documents
question: |
  We may have a few more questions
subquestion: |
  On the next screens, we will ask whatever questions are needed to finish
  creating the documents that you asked for. 
  
  At the end, you will have a chance to download and email the documents for
  yourself or send them to someone else.
---
continue button field: explain_sharing
question: |
  Thank you for sharing your information
subquestion: |
  Your name and apartment number will stay private.
---
event: review_checklist
question: |
  Edit answers on your housing code checklist
review:
  - Edit: users[0].name.first
    button: |
      Your name: ${ users[0] }
  - Edit: review_conditions
    button: |
      ${ review_conditions_template }
  - Edit: users[0].address.address
    button: |
      Your address: ${ users[0].address_block() }      
  - Edit: other_parties[0].name.first
    button: |
      Your landlord's name: ${ other_parties[0] }
  - Edit: other_parties[0].address.address
    button: |
      Your landlord's address: ${ other_parties[0].address.address }
---
code: |
  package_name = "docassemble-HousingCodeChecklist"
  github_user = "nonprofittechy"
  feedback_form = user_info().package + ":feedback.yml"
---
code: |
  organize_tenants_attachment.enabled = screen_ll_knows_problem and document_choice['organize_tenants'] 
---
code: |
  checklist_attachment.enabled = action_argument('enabled') or screen_ll_knows_problem and document_choice['get_report']
---
code: |
  conditions_report_attachment.enabled = action_argument('enabled') or screen_ll_knows_problem and document_choice['get_report']
---
code: |
  request_housing_inspection_attachment.enabled = screen_ll_knows_problem and document_choice['get_inspection']
---
code: |
  tenant_repair_request_attachment.enabled = not screen_ll_knows_problem or document_choice['tell_landlord']
---
code: |
  sanitary_code_template_attachment.enabled = screen_ll_knows_problem and screen_contacted_housing_inspector and document_choice.get('enforce_inspection') and inspection
---
code: |
  Housing_Temporary_Restraining_Order0002_attachment.enabled = screen_ll_knows_problem and document_choice['get_injunction']
---
code: |
  verified_complaint_and_motions_attachment.enabled = screen_ll_knows_problem and document_choice["sue_landlord"]
---
code: |
  Repair_Demand_Letter_attachment.enabled = screen_ll_knows_problem and document_choice["demand_letter_93a"] and is_landlord_subject_to_93a
---
objects:
  - organize_tenants_attachment: ALStaticDocument.using(title="Organize tenants", filename="lt1-pullout-10-getting-organized.pdf")
  - sue_your_landlord_attachment: ALStaticDocument.using(filename="lt1-pullout-13-taking-landlord-to-court.pdf", title="Sue your landlord")
  - organize_tenants_attachment: ALDocument.using(title="Organize!", filename="lt1-pullout-10-getting-organized")
  - sue_your_landlord_attachment: ALDocument.using(title="Sue your Landlord", filename="sue_your_landlord")
  - request_housing_inspection_attachment: ALDocument.using(title="Letter to Request Housing Inspection", filename="inspection_request")
  - checklist_attachment: ALDocument.using(title="Housing Code Checklist", filename="housing_code_checklist")
  - conditions_report_attachment: ALDocument.using(title="Housing Conditions Report", filename="housing_conditions_report")
---
attachment:
  variable name: checklist_attachment[i]
  docx template file: Housing_Code_Checklist.docx
  language: en
---
attachment:
  variable name: conditions_report_attachment[i]
  docx template file: Evidence_packet.docx
  language: en
---
attachment:
  variable name: request_housing_inspection_attachment[i]
  docx template file: letter_to_request_inspection.docx
  language: en
---
#      checklist_attachment,
# sue_your_landlord_attachment,
#       sanitary_code_template_attachment,
# Housing_Temporary_Restraining_Order0002_attachment
objects:
  - housing_code_bundle: ALDocumentBundle.using(elements=[
      conditions_report_attachment,
      organize_tenants_attachment,      
      tenant_repair_request_attachment,
      request_housing_inspection_attachment,
      sanitary_code_template_attachment,
      Repair_Demand_Letter_attachment,
      ],
      title="Your housing conditions toolkit", filename="housing_conditions_documents",
      )
  - tenant_repair_letter_bundle: ALDocumentBundle.using(elements=[tenant_repair_request_attachment],
      title="Your repair request letter",
      filename="repair_request_letter",
      )
  - affirmative_complaint_bundle: ALDocumentBundle.using(elements=[
      verified_complaint_and_motions_attachment
      ], title="Documents to file in court and serve your landlord",
      filename="affirmative_complaint_documents",
      )
---
objects:
  - celhp_logo: DAStaticFile.using(filename="CELHPlogoFL3x-2-300x171.png")
  - lsc_logo: DAStaticFile.using(filename="lsc_logo_horizontal.jpg")
---
event: about_this_interview
id: about made uptocode
question: |
  About MADE: UpToCode
subquestion: |
  ${ about_this_interview_version_info }
back button label: |
  Back to questions
---
template: about_this_interview_version_info
content: |
  <a href="https://www.lsc.gov/"><img src="${ lsc_logo.url_for() }" style="max-width: 80%" alt="Legal Services Corporation logo"/></a>

  MADE: UpToCode was originally authored by Quinten Steenhuis in 2021 in
  partnership with [Massachusetts Law Reform Institute](https://mlri.org) as
  part of the COVID Eviction Legal Help Project legal services component.

  In 2022, the [Legal Services Corporation](https://lsc.gov) and [Northeast
  Legal Aid](https://northeastlegalaid.org) funded a major revision with new
  features, including the ability to file a complaint in court.
  
  Community organizations [La Colaborativa](https://la-colaborativa.org) and
  [Lynn United for Change](https://lynnunited.org) played a special role in
  co-design of this website.

  &copy; 2022 Northeast Legal Aid, Quinten Steenhuis and open source
  contributors under an [MIT license](https://opensource.org/licenses/MIT).  

  % if all_variables(special='metadata').get('authors'):
  Additional authors of work incorporated within UpToCode include: ${
  comma_and_list(all_variables(special='metadata').get('authors')) }.
  % endif
  
  "${all_variables(special='metadata').get('title','').rstrip()}" includes code
  from the [Document Assembly Line
  project](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/).

  "${all_variables(special='metadata').get('title','').rstrip()}" version 
  `${ package_version_number }`; AssemblyLine version `${ al_version }`.
  
  % if package_updated_on:
  Last updated on ${ package_updated_on }. [:fab-fa-github: View code on
  GitHub](${ github_url }).
  % endif
