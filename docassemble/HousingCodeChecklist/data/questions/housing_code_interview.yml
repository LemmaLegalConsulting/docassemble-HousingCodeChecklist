---
translations:
  - housing_code_interview_es.xlsx
  - housing_code_interview_pt.xlsx
  - housing_code_interview_ht.xlsx
---
include:
  - docassemble.AssemblyLine:assembly_line.yml
  - docassemble.ALAffidavitOfIndigency:affidavit_body.yml
  - docassemble.ALToolbox:display_template.yml
  - docassemble.GithubFeedbackForm:embedded_review.yml
  - Repair_Demand_Letter_to_include.yml
  - verified_complaint_and_motions_to_include.yml
  - docassemble.SanitaryCode:sanitary_code_template.yml
  - Repair_Letter_Tenant.yml
  - language.yml
  - simple_conditions.yml
  - orders_and_contempt_complaint.yml
  - customized_screens.yml
---
features:
  bootstrap theme: uptocode.bootstrap.css
---
metadata:
  title: |-
    MADE: UpToCode
  authors:
    - Quinten Steenhuis
    - Michael Cronin
    - Joelle Ataya
    - Cherise Barandao
    - Christopher Selak    
    - Michael Carroll
    - Maeve MacGlinchey
    - Caroline Robinson
    - Plocket
    - Kate Barry
    - Lily Yang
    - Matthew Brooks
    - Lance Godard
    - Kendall Garner
    - David Colarusso
    - Sofija Belacjic
    - Mia Bonardi
  title url: |
    https://getuptocode.org
  tags:
    - HO-00-00-00-00
comment: |
  Some of the documents that this interview assembles
  use work done as part of the Assembly Line project.
---
default screen parts:
  logo: |
    <img src="${ uptocode_logo.url_for() }"><div class="title"></div>
  short logo: |
    <img src="${ uptocode_logo.url_for() }"><div class="title"></div>
---
code: |
  # Allow downloads on the custom error screen
  al_enable_incomplete_downloads = True
---
mandatory: True
id: interview order
code: |
  initial_action_display_cards
  if initial_action_selection == "help_in_court":
    intro_and_terms_of_use_in_court
  else:
    intro_and_terms_of_use
  person_answering
  users[0].name.first
  if person_answering == "attorney" and representation_type == "entering_appearance":
    users[0].attorney.name.first
  intro_terms_of_use
  if initial_action_selection == "help_in_court":
    nav.set_section('review_conditions')
    kind_of_lawsuit
    set_document_choice_by_lawsuit_kind
    if initial_screen_tenant_facing_eviction:
      warn_eviction
    if kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs"):
      if not tenant_sent_ll_notice:
        confirm_suing_choice
      if not tenant_called_inspector:
        add_inspection_letter
      interview_order_navigate_conditions
    
  snapshot_interview_state
  include_conditions_in_complaint # Evaluate so it is available in complaint template
  if initial_action_selection in ["document_by_room", "give_notice"]:
    interview_order_navigate_conditions
  nav.set_section('main_triage_screen')
  screen_ll_knows_problem
  reconsider('snapshot_interview_state')
  nav.set_section('provide_details')  
  if not screen_ll_knows_problem:
    update_sections_with_selected_documents
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    interview_order_tenant_repair_request
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    organizing_interstitial
    nav.set_section("preview_and_sign")
    basic_questions_signature_flow
  else:
    explain_documents
    update_sections_with_selected_documents  
  if screen_ll_knows_problem and document_choice['get_report']:
    nav.set_section(sub_documents['get_report'].get('section_link'))
    users[0].address.address
    other_parties.gather()
    other_parties[0].address.address
  if screen_ll_knows_problem and document_choice['tell_landlord']:
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    interview_order_tenant_repair_request
  #if screen_ll_knows_problem and document_choice['share_with_tenants']:
  #  nav.set_section(sub_documents['share_with_tenants'].get('section_link'))
  #  explain_sharing
  #  store_for_tenant_sharing
  if screen_ll_knows_problem and document_choice['organize_tenants']:
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    users[0].address.address
    try:
      users[0].address.geocode()
    except:
      pass
    organizing_interstitial
  if screen_ll_knows_problem and document_choice['get_inspection']:
    nav.set_section(sub_documents['get_inspection'].get('section_link'))
    interview_order_request_housing_inspection
  if screen_ll_knows_problem and screen_contacted_housing_inspector and document_choice.get('enforce_inspection'):
    nav.set_section(sub_documents['enforce_inspection'].get('section_link'))
    sanitary_code_template
  if screen_ll_knows_problem and document_choice['demand_letter_93a']:
    nav.set_section(sub_documents['demand_letter_93a'].get('section_link'))
    interview_order_Repair_Demand_Letter
  if screen_ll_knows_problem and document_choice['sue_landlord']:
    nav.set_section(sub_documents['sue_landlord'].get('section_link'))
    if person_answering == "attorney" and representation_type == "entering_appearance":
      users[0].attorney.address.address
    interview_order_verified_complaint_and_motions
    if verified_complaint_wants_fee_waiver:
      document_choice["fee_waiver"] = True
      reconsider("update_sections_with_selected_documents")
      nav.set_section(sub_documents['fee_waiver'].get('section_link'))
      set_fee_waiver_defaults
      case_name
      docket_numbers
      ask_affidavit_questions
    nav.set_section('preview_and_sign')
    preview_docs
    basic_questions_signature_flow
  if screen_ll_knows_problem and document_choice["contempt_complaint"]:
    interview_order_contempt_complaint
  if screen_ll_knows_problem and {'enforce_inspection','get_inspection', 'tell_landlord'}.intersection(document_choice.true_values()):
     nav.set_section('preview_and_sign')
     preview_docs
     basic_questions_signature_flow
  reached_download_screen = True
  reconsider('snapshot_interview_state')
  nav.set_section('download_conditions_checklist_docs')
  download_conditions_checklist_docs
---
code: |
  if person_answering == "attorney" and representation_type == "entering_appearance":
    signature_fields = ["users[0].attorney.signature"]
  else:
    signature_fields = ["users[0].signature"]
---
code: |
  nav.set_section('review_conditions')
  bad_conditions["common problems"].claims
  for claim in bad_conditions["common problems"].claims.true_values():
    bad_conditions["common problems"].details[claim].condition_existed_at_start
  if wants_detailed_conditions:
    # go to the opening screen first, instead of asking "is there another" question
    bad_conditions.gather()
    if bad_conditions.count_conditions() > 0:
      # This is a bit of a workaround
      for room in bad_conditions:
        for condition in bad_conditions[room].claims.true_values().difference(bad_conditions.get("common problems",DAEmpty()).claims.true_values()):
          bad_conditions[room].details[condition].condition_existed_at_start  
      review_conditions
    else:
      warn_add_conditions
  else:
    bad_conditions.gathered = True
  interview_order_navigate_conditions = True
---
code: |
  al_form_requires_digital_signature = False
---
depends on:
  - initial_action_selection
  - kind_of_lawsuit
code: |
  include_conditions_in_complaint = initial_action_selection in ["document_by_room", "give_notice"] or (initial_action_selection == "help_in_court" and kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs"))
---
objects:
  - users[0].attorney: ALIndividual
---
objects:
  #- document_problems_image: DAStaticFile.using(filename="dripping_faucet.jpg")
  #- notify_image: DAStaticFile.using(filename="typewriter_luca-onniboni-4v9Kk01mEbY-unsplash1.jpg")
  #- help_in_court_image: DAStaticFile.using(filename="gavel_wesley-tingey-9z9fxr_7Z-k-unsplash_Cropped.jpg")
  #- eviction_image: DAStaticFile.using(filename="apartments_anders-holm-jensen-urYCLa2G4Lg-unsplash_Cropped.jpg")
  - eviction_image: DAStaticFile.using(filename="undraw_coming_home_re_ausc.svg")
  - explore_problems_image: DAStaticFile.using(filename="standing-1.svg")
  - get_order_from_judge_image: DAStaticFile.using(filename="judge_katerina_limpitsouni.svg")
  - resume_session_image: DAStaticFile.using(filename="undraw_folder_files_re_2cbm.svg")
  - uptocode_logo: DAStaticFile.using(filename="horiztonal-white1.5x_blue.svg")
---
event: initial_action_display_cards
id: landing-page
question: |
  You deserve a safe and decent home
subquestion: |
  Need help with repairs or stopping landlord harassment? Choose a task to get started.

  <div class="row g-3 mb-2">
  <div class="col-md-6">
  <div class="card" style="max-width: 540px;">
    <div class="row g-0">
      <div class="col-md-4 d-flex align-content-end">
        <img src="${ explore_problems_image.url_for() }" class="img-fluid rounded-start" alt="illustration - person standing, ready to act">
      </div>
      <div class="col-md-8">
        <div class="card-body">
          <h5 class="card-title">Explore problems and solutions</h5>
          <p class="card-text">Explore problems room by room and get your landlord to fix them.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="document_by_room") }" role="button">Start exploring</a>
        </div>
      </div>
    </div>
  </div>
  </div>
  <div class="col-md-6">
  <div class="card" style="max-width: 540px;">
    <div class="row g-0">
      <div class="col-md-4 d-flex align-content-end">
        <img src="${ get_order_from_judge_image.url_for() }" class="img-fluid rounded-start" alt="illustration - judge holding gavel">
      </div>
      <div class="col-md-8">
        <div class="card-body">
          <h5 class="card-title">Get an order from a judge</h5>
          <p class="card-text">Get an emergency order or an order for your landlord to pay you money.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="help_in_court") }" role="button">Get help in court</a>
        </div>
      </div>
    </div>
  </div>
  </div>

  <div class="col-md-6">
  <div class="card" style="max-width: 540px;">
    <div class="row g-0">
      <div class="col-md-4 d-flex align-content-end" style="max-height: 12em;">
        <img src="${ eviction_image.url_for() }" class="img-fluid rounded-start" alt="illustration - apartment building">
      </div>
      <div class="col-md-8">
        <div class="card-body">
          <h5 class="card-title">Defend against an eviction</h5>
          <p class="card-text">Getting evicted? Stop the eviction before you do anything else.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="https://interviews.gbls.org/start/eviction/" role="button">Defend against an eviction</a>
        </div>
      </div>
    </div>
  </div>
  </div>

  % if get_saved_interview_list(filename=user_info().filename, exclude_current_filename=False, exclude_newly_started_sessions=True):
  <div class="col-md-6">
  <div class="card" style="max-width: 540px;">
    <div class="row g-0">
      <div class="col-md-4 d-flex align-content-end" style="max-height: 12em;">
        <img src="${ resume_session_image.url_for() }" class="img-fluid rounded-start" alt="illustration - open files">
      </div>
      <div class="col-md-8">
        <div class="card-body">
          <h5 class="card-title">Keep working</h5>
          <p class="card-text">You have already started using UpToCode. You can start from where you left off.</p>
          <a class="btn btn-primary stretched-link align-self-end" href="${ interview_url(i=f"{user_info().package}:load_answers.yml") }" role="button">Use my previous answers</a>
        </div>
      </div>
    </div>
  </div>
  </div>
  % endif

  </div>
css: |
  <style>
  .question-landing-page div.container {
    max-width: 100rem;
  }
  </style>

---  
comment: |
  #   <div class="col">
  #     <div class="card h-100">
  #       <img src="${ notify_image.url_for() }" class="card-img-top" alt="...">
  #       <div class="card-body">
  #         <h5 class="card-title">Tell your landlord or city</h5>
  #         <p class="card-text">Answer simple questions to give your landlord or the city legal notice of the problems.</p>
  #         <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="give_notice") }" role="button">Write a letter</a>
  #       </div>
  #     </div>
  #   </div>
  #   <div class="col">
  #     <div class="card h-100">
  #       <img src="${ help_in_court_image.url_for() }" class="card-img-top" alt="...">
  #       <div class="card-body">
  #         <h5 class="card-title">Get help in court</h5>
  #         <p class="card-text">Sue your landlord or ask a judge to order an emergency repair.</p>
  #         <a class="btn btn-primary stretched-link align-self-end" href="${ url_action("initial_action", selection="help_in_court") }" role="button">Get help from a judge</a>
  #       </div>      
  #     </div>
  #   </div>
  #   <div class="col">
  #     <div class="card h-100">
  #       <img src="${ eviction_image.url_for() }" class="card-img-top" alt="...">
  #       <div class="card-body">
  #         <h5 class="card-title">Defend against an eviction</h5>
  #         <p class="card-text">Getting evicted? Stop the eviction before you do anything else.</p>
  #         <a class="btn btn-primary stretched-link align-self-end" href="https://interviews.gbls.org/start/eviction/" role="button">Defend against an eviction</a>
  #       </div>
  #     </div>
  #   </div>
  # </div>
---
continue button field: intro_and_terms_of_use_in_court
question: |
  Get an order from a judge
subquestion: |
  <div class="alert alert-secondary h-100 mh-100" role="alert">
    <h2 class="h4 alert-heading"><i class="fa-solid fa-signs-post"></i> How this works</h2>
    <p class="h-100 overflow-visible mb-0">

  On the next few screens you can:

  <ol>
  <li>
  Tell us about the problems you are having with your landlord.
  </li>
  <li>
  Answer step-by-step questions.
  </li>
  <li>
  Download your completed documents, print, and file in court.
  </li>
  </p>
  </div>
  It takes most tenants about 45 minutes to finish.


  ${ display_template(about_page_contents, scrollable=True, collapse=True) }
fields:
  - To continue, you must accept the terms of use: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.

---
continue button field: intro_and_terms_of_use
question: |
  Start exploring problems and solutions
subquestion: |
  <div class="alert alert-secondary h-100 mh-100" role="alert">
    <h2 class="h4 alert-heading"><i class="fa-solid fa-signs-post"></i> How this works</h2>
    <p class="h-100 overflow-visible mb-0">

  On the next few screens you can:

  <ol>
  <li>
    Track the problems you have in each room of your home. You can add dates and photos, too.
  </li>
  <li>
  Start a next step. You can send a letter, get
  a city inspection, or get a judge to order your landlord to fix the problem.
  </li>
  <li>
  Answer step-by-step questions.
  </li>
  <li>
  Download your completed documents, print, and deliver to the right place.
  </li>
  </ul>
  </p>
  </div>

  It takes most tenants between 20 minutes and 1 hour to finish.

  ${ display_template(about_page_contents, scrollable=True, collapse=True) }
fields:
  - To continue, you must accept the terms of use: acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.
---
event: initial_action
code: |
  initial_action_selection = action_argument("selection")
  initial_action_display_cards = True
---
language: en
comment: |
  Section labels for child interviews that have follow-up
  questions
variable name: sub_documents
data: !!omap
  - get_report:
      section_link: review_checklist
      section_label: My checklist
      name: Housing Code Checklist and Condition Report
      count: 2
  - tell_landlord: 
      section_link: review_tenant_repair_request
      section_label: Tell my landlord
      name: Letter to landlord to report bad conditions
      count: 2
  - demand_letter_93a:
      section_link: review_Repair_Demand_Letter
      section_label: Write a demand letter
      name: Consumer protection demand letter
      count: 2
  #- share_with_tenants:
  #    section_link: review_share_with_tenants
  #    section_label: Tell other tenants
  #    name: Share your information with other tenants
  #    count: 0
  - organize_tenants:
      section_link: organizing_interstitial
      section_label: Organize    
      name: Organize with other tenants
      count: 0
  - get_inspection: 
      section_link: review_request_housing_inspection
      section_label: Get an inspection
      name: Request a city inspection
      count: 2
  - enforce_inspection: 
      section_link: review_sanitary_code_template
      section_label: Enforce an inspection
      name: Ask a judge to enforce a city inspection
      count: 2
  - fix_problems:
      section_link: review_repair_and_deduct
      section_label: Fix the problems myself
      name: Make repairs and deduct the cost from my rent
      count: 0
  - sue_landlord:
      section_link: review_verified_complaint_and_motions
      section_label: Sue my landlord
      name: Sue my landlord in court
      count: 10
  - fee_waiver:
      section_link: review_fee_waiver
      section_label: Fee waiver
      name: Fee waiver
      count: 5      
  - contempt_complaint:
      section_link: review_Contempt_Complaint
      section_label: Ask judge to enforce their own order
      name: Ask judge to enforce their own order
      count: 3
---
language: en
sections:
  - section_getting_started: Getting started
  - review_conditions: List problems
  - main_triage_screen: Choose a solution
  - provide_details: Answer questions
  - preview_and_sign: Preview and sign
  - download_conditions_checklist_docs: Download
auto open: True  
---
modules:
  - .load_data
  - docassemble.ALToolbox.misc
---
depends on:
  - user_language
  - screen_ll_knows_problem
  - document_choice
code: |
  new_sections = []
  if screen_ll_knows_problem:
    for document in sub_documents:
      if document in document_choice.true_values():
        new_sections.append({
          sub_documents[document].get('section_link'):  sub_documents[document].get('section_label')
        })
  else:
    new_sections.append({sub_documents['tell_landlord'].get('section_link'): sub_documents['tell_landlord'].get('section_label')})
    new_sections.append({sub_documents['organize_tenants'].get('section_link'): sub_documents['organize_tenants'].get('section_label')})
  old_nav = nav.get_sections()
  
  position = 3 # ################ Current, hardcoded position in the list
  position_label = 'Answer questions'
  for index, item in enumerate(old_nav):
    if next(iter(item)) == 'provide_details':
      position = index
      position_label = next(iter(item.values()))
  old_nav[position] = {position_label: new_sections}

  nav.set_sections(old_nav)

  update_sections_with_selected_documents = True
---
code: |
  stuff_to_snapshot = {
     'start_time': str(start_time().format('yyyy-MM-dd')),
     'address_city': showifdef('users[0].address.city'),
     'zip': showifdef('users[0].address.zip'),
     'language': user_language,
     }    
  try:  
    stuff_to_snapshot['document_choice'] = comma_list(document_choice.true_values())
    stuff_to_snapshot['reached_document_choice_screen'] = True
  except:
    pass  
  flattened_conditions = []
  if include_conditions_in_complaint:
    for category in bad_conditions.complete_elements():
      flattened_conditions.extend(bad_conditions[category].claims.true_values())

  stuff_to_snapshot['bad_conditions'] = comma_list(flattened_conditions)
  if defined('reached_download_screen'):
    stuff_to_snapshot['reached_download_screen'] = True
  
  log(stuff_to_snapshot)
  store_variables_snapshot(
      data=stuff_to_snapshot, persistent=True
     )
  snapshot_interview_state = True
  log('saved the snapshot')
---
id: launch made
continue button field: launch_made
question: |
  Stop your eviction
subquestion: |
  Click the link below to start using MADE, Massachusetts Defense
  for Eviction in a new window.
  
  When you are finished, you can come back here.
  
  ${ action_button_html('https://interviews.gbls.org/start/eviction', label='Launch MADE') } 
---
continue button field: review_conditions
id: choose a sue your landlord action
question: |
  Why do you need to take your landlord to court?
fields:
  - Choose any that apply: kind_of_lawsuit
    datatype: checkboxes
    choices:
      - I need the court to enforce an order from a housing inspector: enforce_inspection
      - I need repairs to my home now: get_emergency_repairs
      - I needed repairs to my home in the past 6 years: past_repair_needs
        help: |
          You can choose this even if some or all of the problems are fixed now.
      - My landlord changed my locks or moved my things or threatened to do so: illegal_lockout          
      - My landlord went into my home without permission: entered_without_permission
      - My landlord went into my home without giving me enough notice: insufficient_notice
      - My landlord made me pay for utilities but we did not have a written agreement: utilities_no_agreement
      - My utilities were shutoff: utility_shutoff
      - I need help with something else: other_landlord_tenant
      - My landlord is ignoring a court order: file_contempt_complaint
    minlength: 1
    validation messages:
      minlength: |
        You need to choose at least one problem to continue.
---
id: confirm notice
question: |
  Before you take your landlord to court
fields:
  - Do you have an active eviction case in court?: initial_screen_tenant_facing_eviction
    datatype: yesnoradio
    help: |
      Answer "yes" if:
      
      - you have a case that is already in court, or
      - you have a "Summons and Complaint" from your landlord with a court date coming up
      
      Answer "no" if:
      
      - there is no eviction case
      - the eviction case is already over, or
      - you only have a "Notice to Quit" or "Notice to Terminate Tenancy"
  - Does your landlord know about the problems that you need them to fix?: tenant_sent_ll_notice
    datatype: yesnoradio
    show if:
      code: |
        kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs")
  - Have you called a town or city inspector about the problem?: tenant_called_inspector
    datatype: yesnoradio
    show if:
      code: |
        kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs")
---
id: eviction warning
question: |
  If you are being evicted
subquestion: |
  Make sure you respond to the eviction in court.

  In some cases, you can sue your landlord for the same problems as part of the eviction.
  The problems can also be a "defense" that stops your eviction.

  ${ collapse_template(when_does_8a_apply) }
  
  Most tenants should use [MADE](https://gbls.org/MADE) to stop their eviction
  before they start a new case against their landlord.
  
  ${ action_button_html("https://gbls.org/MADE", size="md", label="Use MADE to stop my eviction", color="primary", icon="arrow-up-right-from-square") }
continue button label: |
  Continue anyway
continue button field: warn_eviction
---
template: when_does_8a_apply
subject: |
  When can a problem stop my eviction?
content: |
  If you are being evicted only because:

  * you owe rent, or
  * your landlord only wants you to move out and is not saying it is your fault

  you may be protected from eviction by [239 &sect; 8A](https://www.masslegalhelp.org/housing/lt1-chapter-12-legal-defenses-counterclaims-article).

  239 &sect; 8A gives you the right to "buy back" your home if your landlord owes you
  at least $1 because of a repair that they did not make or they violated another 
  landlord-tenant law.

  You cannot use this right if your landlord is evicting you because of a "fault" reason,
  such as breaking a rule in your lease other than being behind in the rent.

  You can use the "buy back" right to stop an eviction if you raise it in your eviction
  case. You need to file an eviction answer using [MADE](https://gbls.org/MADE) to claim
  it instead of using this website.
---
id: warn against suing
question: |
  You may want to wait to take your landlord to court
subquestion: |
  Before you take your landlord to court, you should make sure that they know about the problem.

  Even if you did not tell your landlord about the problem, there may be another way
  that they know. For example:

  - If the problem is in a public part of your building, or
  - The problem existed before you moved in, or
  - Your landlord came to your apartment for another reason and had a chance to see the problem
fields:
  - What do you want to do?: confirm_suing_choice
    datatype: radio
    choices:
      - Take my landlord to court now: sue_now
      - Give my landlord notice first: give_notice_first
---
id: add inspection letter to suit
question: |
  Calling an inspector
subquestion: |
  It is usually a good idea to call a housing inspector if you sue your
  landlord. The court will pay attention to the problems that the inspector
  found. The report that the inspector writes may be evidence in your case.

  You do not have to call an inspector before you use this website but you may want to
  get the inspection before you deliver the papers to court.

  If it is an emergency you do not have to wait.
fields:
  - Do you want to include a letter to your city or town inspector?: add_inspection_letter
    datatype: yesnoradio
---
features:
  navigation back button: False
  css:
    - docassemble.ALToolbox:collapse_template.css
    - styles.css
  javascript:
    - favicon.js
    - back_button.js
  #navigation: horizontal    
  small screen navigation: dropdown
  progress bar: False
---
objects:
  - dataloader: DataLoader.using(filename="housing_code_checklist.xlsx")
  - inspector_loader: InspectorLoader.using(filename="housing_inspectors.xlsx")
  - bad_conditions: ConditionsDict.using(there_are_any=True)
---
depends on:
  - bad_conditions[i].claims
code: |
  bad_conditions[i].claims
  bad_conditions[i].df
  for condition in bad_conditions[i].claims.true_values().difference(bad_conditions.get("common problems",DAEmpty()).claims.true_values()):
    bad_conditions[i].details[condition].condition_existed_at_start
  bad_conditions[i].complete = True
---
code: |  
  bad_conditions[i].details[j].condition_existed_at_start
  bad_conditions[i].details[j].complete = True
---
#features:
#  question back button: False
---
template: what_problems_can_be_solved
subject: |-
  What can I do?
content: |-
  You can choose what to do. We can help you:

  * Let your landlord know about the problem.
  * Call a housing inspector.
  * Ask a judge to order your landlord to fix the problems.
  * Sue your landlord in court.
  
  ${ action_button_html(url_action('learn_more'), label="Read more first") }  
---
id: intro affirmation
question: |
  % if person_answering == "tenant":
  ${ users.familiar() }, you can do this!
  % else:
  Let's get started helping ${ users.familiar() }!
  % endif
subquestion: |
  % if initial_action_selection in ["document_by_room", "give_notice"] or (initial_action_selection == "help_in_court" and kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs")):
  We will start by asking you about the repairs that you need.

  % endif
  <div class="alert alert-secondary h-100" role="alert">
    <h2 class="h4 alert-heading"><i class="fa-solid fa-circle-info"></i> Did you know?</h2>
    <p class="h-100 overflow-visible mb-0">
    "Retaliation" is illegal. 
    Your landlord cannot evict you or raise your rent because you complain
    about problems in your home. 
    <a class="alert-link" href="https://www.masslegalhelp.org/when-is-eviction-illegal">Read more</a>.
    </p>
  </div>
continue button field: intro_terms_of_use  
continue button label: Get started
---
id: track conditions intro
question: |
  Track your housing problems
subquestion: |
  This website will help you track.
continue button field: track_conditions_intro  
---
id: learn more
question: |
  Solve your housing problems
subquestion: | 
  ${ collapse_template(how_to_defend_eviction_template) }
  ${ collapse_template(how_to_document_template) }
  ${ collapse_template(how_to_notify_landlord_template) }
  ${ collapse_template(get_inspection_template) }
  ${ collapse_template(sue_your_landlord_template) } 
continue button field: learn_more
---
id: simple conditions
undefine:
  - bad_conditions["common problems"].df
  - bad_conditions["common problems"].complete
question: |
  % if person_answering == "tenant":
  Do you have any of the problems listed below?
  % else:
  Does ${ users.familiar() } have any of the problems listed below?
  % endif
subquestion: |
  This is a list of common problems that tenants have. Tap the 
  question mark icon to get more information about each
  problem.

  You can include any problems you have had over the last **6 years** in this apartment, even
  if they are fixed now.

  ${ collapse_template(how_far_back_should_i_go_template) }
fields:
  - label: |
      % if person_answering == "tenant":
      What repair problems do you have?
      % else:
      What repair problems does ${ users.familiar() } have?
      % endif
    field: bad_conditions["common problems"].claims
    datatype: checkboxes
    code: |
      conditions_from_list(dataloader, simple_conditions_list, language=user_language)
  - note: |
      <h2 class="h4">Have you had any of these additional problems?<h2>
    show if:
      code: |
        initial_action_selection != "help_in_court"
  - Choose any that apply: kind_of_lawsuit
    datatype: checkboxes
    choices:
      - My landlord changed my locks or moved my things or threatened to do so: illegal_lockout          
      - My landlord went into my home without permission: entered_without_permission
      - My landlord went into my home without giving me enough notice: insufficient_notice
      - My landlord made me pay for utilities but we did not have a written agreement: utilities_no_agreement
      - My utilities were shutoff: utility_shutoff
      - My landlord is ignoring a court order: file_contempt_complaint
    show if:
      code: |
        initial_action_selection != "help_in_court"
  - note: |
      Don't see your problem on this list? There are more problems
      to pick from if you keep going.
---
template: how_far_back_should_i_go_template
subject: |
  What problems should I list?
content: |
  If you want to sue your landlord for money, you can list any problems that you have
  had over the last 6 years. Even if the problem is fixed now.

  Tenants who do not want to sue their landlord usually only list problems that still 
  need to be fixed.
---
id: review simple conditions
question: |
  Do you want to keep exploring problems?
subquestion: |
  % if bad_conditions["common problems"].claims.any_true():
  % if len(bad_conditions["common problems"].claims.true_values()) > 1:
  You have picked ${ len(bad_conditions["common problems"].claims.true_values()) } problems
  so far.
  % else:
  You have picked 1 problem so far.
  % endif
  % endif  
  You can keep exploring problems room by room, or skip ahead
  to start working on a solution.

  ${ collapse_template(how_many_problems_are_there_template)}

fields:
  - Keep exploring problems?: wants_detailed_conditions
    datatype: radio
    choices:
      - Yes, explore problems I may have in each room: True
      - No, go straight to a solution: False
---
template: how_many_problems_are_there_template
subject: |
  How many problems can you help me with?
content: |
  If you explore room by room, you can pick from a list of about
  150 problems. Some may be problems you did not know your
  landlord needs to fix.

  The list comes from the Massachusetts Sanitary Code. We have
  translated the Sanitary Code into easier to understand sentences
  with short explanations.
---  
# WARNING: This page id needs to stay the same or the selectors for
# the button styles in styles.css will need to be updated to match
id: room chooser
question: |
  Your landlord's responsibilities
subquestion: |
  % if len(bad_conditions) > 1:
  You have already listed problems in these rooms:
  
  % for button in bad_conditions:
  * [:pencil-alt: ${ str(button).capitalize() }](${ url_action('bad_conditions["' + button + '"].claims') } )
  % endfor
  % else:
  Your home is protected by the [State Sanitary 
  Code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download).
  Click a room or category to add a problem.
  % endif
field: bad_conditions.new_item_name
buttons:
  code: |
    [button for button in available_buttons if next(iter(button)) not in bad_conditions ]
back button label: |
  Back
post: |
  % if len(bad_conditions.elements):
  ${ action_button_html(url_ask('set_gathered'), label="Skip and continue", color="primary", size="md") }
  % endif
---
code: |
  bad_conditions.gathered = True
  set_gathered = True
---
depends on:
  - user_language
language: en
variable name: available_buttons
data:
  - emergency: Emergency
    image: first-aid
    css class: btn-primary
  - Living area: Living area  
    image: couch

  - Bathroom: Bathroom
    image: bath
  - Kitchen: Kitchen
    image: utensils        
  - Bedroom: Bedroom    
    image: bed    
  - Porch and balcony: Porch and balcony
    image: store    
  - Exits: Exits
    image: door-open
  - Lead paint: Lead Paint
    image: paint-roller    
  - Safety: Safety
    image: unlock-alt        
  - Heat: Heating
    image: thermometer-full
  - Lighting: Lighting
    image: lightbulb    
  - Electricity and Gas: Electricity and Gas
    image: plug
  - Water: Water
    image: faucet    
  - Garbage: Garbage
    image: trash-alt
  - Rodents and insects: Rodents and insects
    image: bug
  - Building Structure: Building Structure
    image: hard-hat        
  - General Maintenance: General maintenance
    image: tools
---
if: |
  i == 'emergency'
undefine:
  - bad_conditions[i].df  
  - bad_conditions[i].complete
id: Claims
question: |
  Emergency problems
subquestion: |
  Your landlord should start fixing any problem listed below within 24 hours
  of learning about the problem.
  
  If you do not see your problem listed below, try a different category.

  ${ collapse_template(emergency_sanitary_code_template) }
fields:
  - no label: bad_conditions[i].claims
    datatype: checkboxes
    required: False
    code: |
      conditions_with_help(dataloader, "24 hours", search_column="Deadline", language=user_language)
    default:
      code: |
        bad_conditions[i].claims.true_values() if defined('bad_conditions[i].claims') else [] + bad_conditions["common problems"].claims.true_values()
---
template: emergency_sanitary_code_template
subject: |
  Related Sanitary Code
content: |
  The problems listed above are cited in the following sections of the
  [Sanitary Code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
      
  Problem | Sanitary Code
  --------|------------------
  % for row in dataloader.get_rows(allowed_types=["24 hours"], filter_column="Deadline").iterrows():
  ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] if row[1]['Sanitary Code Section'] else ""}
  % endfor
---
if:
  i != 'emergency'
undefine:
  - bad_conditions[i].df
  - bad_conditions[i].complete  
id: Non-emergency claims
question: |
  Problems with ${ i }
subquestion: |
  You can list any problems that you have had in the last 6 years at this apartment,
  even if they are fixed now.  

  ${ collapse_template(sanitary_code_template) }
fields:
  - no label: bad_conditions[i].claims
    datatype: checkboxes
    required: False
    code: |
      conditions_with_help(dataloader, i, language=user_language)
    default:
      code: |
        bad_conditions[i].claims.true_values() if defined('bad_conditions[i].claims') else []  + bad_conditions["common problems"].claims.true_values()
---
template: sanitary_code_template
subject: |
  Related Sanitary Code
content: |
  The problems listed above are cited in the following sections of the
  [Sanitary Code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
      
  Problem | Sanitary Code
  --------|------------------
  % for row in dataloader.get_rows(allowed_types=[i], filter_column="Category").iterrows():
  ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] or "" }
  % endfor
---
id: there is another condition
question: |
  Do you want to list problems in another category?
subquestion: |
  So far you have reviewed problems in ${ comma_and_list([f'"{str(key).capitalize()}"' for key in bad_conditions.keys()]) }.
  
  Tap "yes" if you want to look at problems in another category.
yesno: bad_conditions.there_is_another
---
code: |
  # available buttons doesn't include the "short" list
  if len(bad_conditions.complete_elements()) >= len(available_buttons) + 1: 
    bad_conditions.there_is_another = False
---
code: |
  if wants_detailed_conditions and len(bad_conditions.complete_elements()) == 1:
    bad_conditions.there_is_another = True
---
depends on:
  - bad_conditions[i].claims
code: |
  if i != "common problems":
    overlapping_conditions = bad_conditions.get("common problems",DAEmpty()).claims.true_values()
  else:
    overlapping_conditions = []
  bad_conditions[i].df = dataloader.load_rows(bad_conditions[i].claims.true_values().difference(overlapping_conditions))
---
continue button field: review_conditions
id: review conditions
question: |
  Here is what you told us so far
subquestion: |  
  % if initial_action_selection == "help_in_court":
  You need to sue your landlord because:

  % for basis in kind_of_lawsuit.true_values():
  % if basis == "enforce_inspection":
  * Enforce an inspection
  % elif basis == "get_emergency_repairs":
  * Get repairs
  % elif basis == "past_repair_needs":
  * Get paid because of repairs I needed in the last 6 years
  % elif basis == "illegal_lockout":
  * Landlord illegally locked me out of the apartment or moved my belongings out, or threatened to do so
  % elif basis == "entered_without_permission":
  * Landlord entered my home without permission
  % elif basis == "insufficient_notice":
  * Landlord entered without notice
  % elif basis == "utilities_no_agreement":
  * Landlord made me pay for utilities without a written agreement
  % elif basis == "utility_shutoff":
  * My utilities were shutoff
  % elif basis == "other_landlord_tenant":
  * Other
  % elif basis == "file_contempt_complaint":
  * My landlord is ignoring a court order
  % endif
  % endfor

  [:pencil: Change my answers](${ url_action('kind_of_lawsuit') })
  % endif
  % if initial_action_selection != "help_in_court" or kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs"):
  <h2 class="h4"> Problems in your home</h2>

  ${ review_conditions_template }
  % endif
---
template: review_conditions_template
content: |
  % if len(bad_conditions.elements): 
  Click a category or room below to revisit your choices.
  Click a problem to edit the time the problem started, upload evidence,
  and make other changes.
  
  % for category in bad_conditions.elements:
  #### [:pencil-alt: ${ category.title() if not category is None else 'None' }](${ url_action('bad_conditions["' + str(category) + '"].claims') })
  
  % for index, row in bad_conditions[category].df.iterrows():
  * [:pencil-alt: ${ row['Interview description'] }](${ url_action(f'bad_conditions["{str(category)}"].details["{str(index)}"].condition_existed_at_start')})
  % endfor
  % endfor
  % endif
  
  % if len(bad_conditions) < len(available_buttons):
  ${ bad_conditions.add_action() }
  % endif
---
event: warn_add_conditions
question: |
  You haven't added any problems yet
subquestion: |
  You should add at least one problem to continue.
  % if len(bad_conditions): 
  
  Click a category below to revisit your selections.  
  % endif  
  % for category in bad_conditions:
  #### [${ category.title() if not category is None else 'None' }](${ url_action('bad_conditions["' + str(category) + '"].claims') })
  
  % for index, row in bad_conditions[category].df.iterrows():
  * ${ row['Interview description'] }
  % endfor
  % endfor  
  
  % if len(bad_conditions) < len(available_buttons):
  ${ bad_conditions.add_action() }
  % endif
---
continue button field: main_triage_screen
id: triage
question: |
  Deciding on your next steps
fields:
  - Do you have an active eviction case in court?: screen_tenant_facing_eviction
    datatype: yesnoradio
    help: |
      Answer "yes" if:
      
      - you have a case that is already in court, or
      - you have a "Summons and Complaint" from your landlord with a court date coming up
      
      Answer "no" if:
      
      - there is no eviction case
      - the eviction case is already over, or
      - you only have a "Notice to Quit" or "Notice to Terminate Tenancy"
  - note: |
      **Make sure you respond to the eviction.** You can use [MADE](https://gbls.org/MADE) to 
      stop the eviction case. You shouldn't start a new court case with UpToCode.
    show if: screen_tenant_facing_eviction
  - Does your landlord already know about at least one of the problems in your home?: screen_ll_knows_problem
    datatype: yesnoradio
  - note: |
      **Okay.** Your first step should be to tell your landlord about the
      problem. We can help you write a letter to tell your landlord and put
      them on legal notice.
    show if:
      variable: screen_ll_knows_problem
      is: False
  - Is your landlord already fixing all of the problems?: screen_ll_already_fixing
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **You may want to give your landlord time.** Some serious problems
      need to be fixed in 24 hours, and others in 5 days. Other problems
      can be fixed in up to 30 days.
      
      If you have not given your landlord enough time to fix the problem yet,
      you may want to wait before you get help from a court. But it is up
      to you.
    show if: screen_ll_already_fixing
  - Are other tenants in your building also having housing problems?: screen_other_tenants_with_problem
    datatype: yesnomaybe
    show if: screen_ll_knows_problem
  - note: |
      **${ users.familiar() }, you and your neighbors are stronger together**. You have the right to **organize**
      with other tenants to fight the bad housing conditions.
    show if: screen_other_tenants_with_problem
  - Have you reported all of the problems to a city housing inspector?: screen_contacted_housing_inspector       
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **You may want to get an inspection.** You are not required to get a
      housing inspection. But it can help a judge understand the problems
      better. You do not need to wait for the inspection to get more help.
    show if:
      variable: screen_contacted_housing_inspector
      is: False
  - note: |
      **What would you like to do?**    
      Remember, you have the right not to be {retaliated} against.
    show if: screen_ll_knows_problem      
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_ll_knows_problem") && val("screen_contacted_housing_inspector")
    choices:
      - Save or print a copy of my checklist for later: get_report
      - Tell my landlord about the problems: tell_landlord
      - Organize with my neighbors or other tenants in my city: organize_tenants
      #- Let other tenants know about my bad landlord: share_with_tenants
      #  help: |
      #    This will share your address and landlord's name, but not your name
      #    or apartment number.
      - Get a city inspection: get_inspection
      # - Withhold rent: withhold_rent
      #- Fix the problems myself and deduct money from my rent: fix_problems
      # TODO(41): low priority
      - Ask a judge to enforce an order from a housing inspector: enforce_inspection
      - Ask for a fair settlement (consumer protection demand letter or settlement letter): demand_letter_93a
      - Ask a judge to order my landlord to fix a problem or sue my landlord for money: sue_landlord
      - Tell a judge that my landlord is ignoring the judge's order: contempt_complaint
    default:
      code: |
        ["get_report"] if kind_of_lawsuit.all_false() else ["get_report", "sue_landlord"]
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_ll_knows_problem") && !val("screen_contacted_housing_inspector")
    choices:
      - Save or print a copy of my checklist for later: get_report
      - Tell my landlord about the problems: tell_landlord
      - Organize with my neighbors or other tenants in my city: organize_tenants
      #- Let other tenants know about my bad landlord: share_with_tenants
      #  help: |
      #    This will share your address and landlord's name, but not your name
      #    or apartment number.
      - Get a city inspection: get_inspection
      # - Withhold rent: withhold_rent
      #- Fix the problems myself and deduct money from my rent: fix_problems
      - Ask for a fair settlement (consumer demand letter): demand_letter_93a
      - Sue my landlord for money or to get an emergency order: sue_landlord
    none of the above: False
    default:
      code: |
        ["get_report"] if kind_of_lawsuit.all_false() else ["get_report", "sue_landlord"]

validation code: |
  if screen_ll_knows_problem and len(document_choice.true_values()) < 1:
    validation_error("Select at least one.", field="document_choice")
  if screen_ll_knows_problem and "contempt_complaint" not in document_choice:
    document_choice["contempt_complaint"] = False
terms:
  retaliated: |
    Retaliation could include evicting you or raising your rent because you
    complained about housing problems. Retaliation is illegal and you have
    protections in a court.
---
# Set a default value for all document choices
variable name: document_choice
use objects: True
data:
  get_report: False
  tell_landlord: False
  organize_tenants: False
  get_inspection: False
  enforce_inspection: False
  demand_letter_93a: False
  sue_landlord: False
  contempt_complaint: False
  fee_waiver: False
---
depends on:
  - document_choice
only sets:
  - set_document_choice_by_lawsuit_kind
code: |
  # Decide which documents we need based on this initial
  # screening question

  if kind_of_lawsuit.any_true("get_emergency_repairs", "past_repair_needs"):
    document_choice["get_report"] = True
    screen_contacted_housing_inspector = tenant_called_inspector
    if not tenant_called_inspector:
      document_choice["get_inspection"] = add_inspection_letter
    if (
        not tenant_sent_ll_notice 
        and confirm_suing_choice == "give_notice_first"
    ):
      screen_ll_knows_problem = False
      document_choice["sue_landlord"] = False
      document_choice["tell_landlord"] = True
    else:
      document_choice["sue_landlord"] = True
  elif kind_of_lawsuit["file_contempt_complaint"]: # shouldn't start a new lawsuit
    screen_contacted_housing_inspector = None
    initial_screen_tenant_facing_eviction = None
    screen_ll_knows_problem = True
    document_choice["contempt_complaint"] = True
  else:
    screen_contacted_housing_inspector = False
    document_choice["sue_landlord"] = True
  if kind_of_lawsuit["enforce_inspection"]:
    document_choice["enforce_inspection"] = True
  else:
    document_choice["fee_waiver"] = True
  set_document_choice_by_lawsuit_kind = True
---
code: |
  if initial_action_selection == "help_in_court":
    # Don't use triage screen if initial action was suing LL
    screen_ll_knows_problem = True
---
id: interview_order_request_housing_inspection
code: |
  users[0].name.first
  users[0].address.address
  try:
    users[0].address.geocode()
  except:
    pass
  inspector_information
  # display_inspector_information
  other_parties[0].name.first
  other_parties[0].address.address
  interview_order_request_housing_inspection = True
---
code: |
  inspector_information = inspector_loader.load_row(users[0].normalized_address().city).fillna("")
---
id: display inspector information
continue button field: display_inspector_information
question: |
  In ${ users[0].normalized_address().city }, you call ${ inspector_information["Title"] } to report housing problems
subquestion: |
  You can call the inspector at ${ tel(inspector_information["Telephone"]) }.

  No need to write this information down.

  ${ collapse_template(detailed_inspector_information_template)}
---
template: detailed_inspector_information_template
subject: |
  Full contact information for my inspector
content: |
  &nbsp; | &nbsp;
  -------|---------
  % if inspector_information["Telephone"]:
  Telephone | ${ tel(inspector_information["Telephone"]) }
  % endif
  % if inspector_information["EXTENSION"]:
  Extension | ${ inspector_information["EXTENSION"] }
  % endif
  % if inspector_information["URL"]:
  Website | [${ inspector_information["URL"] }](${ inspector_information["URL"]})
  % endif
  Address | ${ inspector_information["Address Line 1"] }, ${ inspector_information["Address Line 2"] }, MA ${ inspector_information["Zip"] }
  % if inspector_information["Email"]:
  Email | [${ inspector_information["Email"]}](mailto:${ inspector_information["Email"]})
  % endif
  % if inspector_information["Special Contact"]:
  Other report method | ${ inspector_information["Special Contact"] }
  % endif

---
id: preview_docs
continue button field: preview_docs
question: |
  Review your documents before you sign
subquestion: |
  Tap to open the document below in a new window.
  
  If you need to make any changes, tap the navigation labels
  to revisit the section you want to change.
  
  When you are ready, click "next" to add your signature.
  
  % if screen_ll_knows_problem:
  ${ everything_for_emailing_bundle.as_pdf(key='preview') }

  % else:
  ${ tenant_repair_letter_bundle.as_pdf(key='preview') }
  
  % endif
---
id: download_conditions_checklist_docs
event: download_conditions_checklist_docs
question: |
  Your documents are ready
subquestion: |
  
  1. Download and print your documents below. You can also send yourself
  or someone else a copy of the documents in an email.
  1. Read the instructions to learn how to file and deliver your
  documents.
  % if defined('trial_court'):
  1. Deliver the court forms to the ${ trial_court } at ${ trial_court.address.on_one_line() }. You can call for instructions at ${ tel(trial_court.phone_number) }.
  % endif
  1. You can come back to this website later to take additional steps.
  % if showifdef("interview_order_request_housing_inspection"):

  <h2 class="h4">To call the housing inspector for your city or town</h2>
  You can call the inspector at ${ tel(inspector_information["Telephone"]) }.
  
  Use the report below to explain why you are calling, and keep a copy with you when the 
  inspector comes to your home.

  ${ collapse_template(detailed_inspector_information_template)}  
  % endif

  % if screen_ll_knows_problem and len(housing_code_bundle.enabled_documents()) > 0:
  <h2 class="h4">Documents for you to print and deliver or keep for your records</h2>
  ${ housing_code_bundle.download_list_html(format="docx") }

  % elif len(tenant_repair_letter_bundle.enabled_documents()) > 0: 
  ${ tenant_repair_letter_bundle.download_list_html(format="docx") }
  
  % endif  
  % if screen_ll_knows_problem and document_choice['sue_landlord'] or document_choice["contempt_complaint"]:
  [BR]
  <h2 class="h4">Documents for you to print and file in court</h2>
  ${ affirmative_complaint_bundle.download_list_html(format="docx") }
    
  % endif
  
  ${ everything_for_emailing_bundle.send_button_html() }

  <br/>
  ${ only_once_review_widget() }
---
template: housing_code_bundle.send_email_template
subject: |
  ${ users.familiar() }, 
  % if len(housing_code_bundle.enabled_documents()) > 1:
  your documents from UpToCode are ready
  % else:
  your document from UpToCode is ready
  % endif
content: |
  Thank you for using UpToCode!

  We are attaching a copy of the documents that you worked on. Keep this for
  your records.

  Learn more at [getuptocode.org](https://getuptocode.org)
---
template: tenant_repair_letter_bundle.send_email_template
subject: |
  ${ users.familiar() }, 
  % if len(tenant_repair_letter_bundle.enabled_documents()) > 1:
  your documents from UpToCode are ready
  % else:
  your document from UpToCode is ready
  % endif
content: |
  Thank you for using UpToCode!

  We are attaching a copy of the documents that you worked on. Keep this for
  your records.

  Learn more at [getuptocode.org](https://getuptocode.org)
---
template: affirmative_complaint_bundle.send_email_template
subject: |
  ${ users.familiar() }, 
  % if len(tenant_repair_letter_bundle.enabled_documents()) > 1:
  your documents from UpToCode are ready
  % else:
  your document from UpToCode is ready
  % endif
content: |
  Thank you for using UpToCode!

  We are attaching a copy of the documents that you worked on. Keep this for
  your records.

  To get help from a judge, you also need to file a copy with ${ trial_court }
  and deliver a copy to your landlord. Read the attached documents for more
  instructions.

  Learn more at [getuptocode.org](https://getuptocode.org)
---
id: details for this claim
question: |
  More information about "${ str(bad_conditions[i].df.loc[j]['Interview description']).strip()[:1].lower() }${ str(bad_conditions[i].df.loc[j]['Interview description']).strip()[1:] }"  
fields:
  - Describe the problem using your own words (write about 1 sentence; optional): bad_conditions[i].details[j].description
    datatype: area
    rows: 2
    required: False
  - Was the problem there when you moved in?: bad_conditions[i].details[j].condition_existed_at_start
    datatype: yesnoradio
  - note: |
      **When did the problem start?**
      Enter as much of the date as you know.
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - Year: bad_conditions[i].details[j].start_year
    datatype: integer
    code: |
      list(range(today().year, today().year - 20 - 1, -1))
    help: |
      Problems that started in the last **6** years are the most important to
      report, but use the closest year that you know even if it was older than 6
      years ago.
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - Month: bad_conditions[i].details[j].start_month
    datatype: integer
    required: False
    choices:
      - January: 1
      - February: 2
      - March: 3
      - April: 4
      - May: 5
      - June: 6
      - July: 7
      - August: 8
      - September: 9
      - October: 10
      - November: 11
      - December: 12
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - Day: bad_conditions[i].details[j].start_day
    datatype: integer
    code: |
      range(1,31+1)
    required: False
    show if: 
      variable: bad_conditions[i].details[j].condition_existed_at_start
      is: False
  - The problem is fixed: bad_conditions[i].details[j].condition_ended
    datatype: yesno
  - Date problem ended (optional): bad_conditions[i].details[j].end_date
    max: ${ today().format("yyyy-MM-dd") }
    datatype: ThreePartsDate
    show if: bad_conditions[i].details[j].condition_ended
    required: False
  - Take or upload a photo: bad_conditions[i].details[j].has_file_to_upload
    datatype: yesno
  - Add a photo or other proof of the problem, if you have it: bad_conditions[i].details[j].files
    datatype: files
    required: False
    image upload type: jpeg
    accept: |
      "image/*,image/png,image/jpeg,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"       
    show if: bad_conditions[i].details[j].has_file_to_upload
validation code: |
  # Transform the approximate date into a real DADateTime object
  if not bad_conditions[i].details[j].condition_existed_at_start:
    bad_conditions[i].details[j].start_date = today().replace(day=1, month=1) # otherwise if the current day is past 28 might get a value error
    try:
      if bad_conditions[i].details[j].start_year:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(year=int(bad_conditions[i].details[j].start_year))
      if int(bad_conditions[i].details[j].start_month) in range(1,12):
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(month=int(bad_conditions[i].details[j].start_month))
        bad_conditions[i].details[j].approximate_month = False
      else:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(month=1)
        bad_conditions[i].details[j].approximate_month = True
      if int(bad_conditions[i].details[j].start_day) in range(1,31):
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(day=int(bad_conditions[i].details[j].start_day))
        bad_conditions[i].details[j].approximate_day = False
      else:
        bad_conditions[i].details[j].start_date = bad_conditions[i].details[j].start_date.replace(day=1)
        bad_conditions[i].details[j].approximate_day = True
    except ValueError:
      validation_error(f"The date {bad_conditions[i].details[j].start_month or 1}/{bad_conditions[i].details[j].start_day or 1}/{bad_conditions[i].details[j].start_year} is not a valid date. Check the day of the month or leave it blank.", field="bad_conditions[i].details[j].start_day")
---
id: your address
question: |
  What is your landlord's address?
fields:
  - I do not know my landlord's address: ll_address_unknown
    datatype: yesno
  - note: |
      **Okay**. You need your landlord's address for many of the forms on
      this website. You can still finish this form but you will need to add
      your landlord's address before you deliver the form.
    show if: ll_address_unknown       
  - Street address: other_parties[0].address.address
    address autocomplete: True
    hide if: ll_address_unknown
  - Unit: other_parties[0].address.unit
    required: False
    hide if: ll_address_unknown    
  - City: other_parties[0].address.city
    hide if: ll_address_unknown  
  - State: other_parties[0].address.state
    hide if: ll_address_unknown  
    code: |
      states_list()
    default: MA      
  - Zip: other_parties[0].address.zip
    required: False
    hide if: ll_address_unknown
validation code: |
  if ll_address_unknown:
    other_parties[0].address.address = "[ Landlord's address ]"
    other_parties[0].address.city = "[ Landlord's city ]"
---
id: explain_documents
continue button field: explain_documents
question: |
  We may have a few more questions
subquestion: |
  On the next screens, we will ask whatever questions are needed to finish
  creating the documents that you asked for. 
  
  At the end, you will have a chance to download and email the documents for
  yourself or send them to someone else.
---
continue button field: explain_sharing
question: |
  Thank you for sharing your information
subquestion: |
  Your name and apartment number will stay private.
---
event: review_checklist
question: |
  Edit answers on your housing code checklist
review:
  - Edit: users[0].name.first
    button: |
      Your name: ${ users[0] }
  - Edit: review_conditions
    button: |
      ${ review_conditions_template }
  - Edit: users[0].address.address
    button: |
      Your address: ${ users[0].address_block() }      
  - Edit: other_parties[0].name.first
    button: |
      Your landlord's name: ${ other_parties[0] }
  - Edit: other_parties[0].address.address
    button: |
      Your landlord's address: ${ other_parties[0].address.address }
---
code: |
  package_name = "docassemble-HousingCodeChecklist"
  github_user = "nonprofittechy"
  feedback_form = user_info().package + ":feedback.yml"
---
code: |
  organize_tenants_attachment.enabled = screen_ll_knows_problem and document_choice['organize_tenants'] 
---
code: |
  conditions_report_attachment.enabled = action_argument('enabled') or screen_ll_knows_problem and document_choice['get_report']
---
code: |
  request_housing_inspection_attachment.enabled = screen_ll_knows_problem and document_choice['get_inspection']
---
code: |
  tenant_repair_request_attachment.enabled = letter_to_notify_landlord_instructions_attachment.enabled = not screen_ll_knows_problem or document_choice['tell_landlord']
---
code: |  
  Repair_Demand_Letter_attachment.enabled = not screen_ll_knows_problem or document_choice['tell_landlord']
---
code: |
  sanitary_code_template_attachment.enabled = screen_ll_knows_problem and screen_contacted_housing_inspector and document_choice.get('enforce_inspection') and inspection
---
code: |
  verified_complaint_and_motions_attachment.enabled = document_choice["sue_landlord"]
---
code: |
  verified_complaint_and_motions_post_interview_instructions.enabled = document_choice['sue_landlord']
---
code: |
  verified_complaint_and_motions_attachment.enabled = screen_ll_knows_problem and document_choice['sue_landlord']
---
code: |  
  temporary_order.enabled = verified_complaint_and_motions_attachment.enabled
---
code: |
  if trial_court.department != "Housing Court":
    order_of_notice.enabled = verified_complaint_and_motions_attachment.enabled
  else:
    order_of_notice.enabled = False
---
code: |
  contempt_complaint.enabled = screen_ll_knows_problem and document_choice['contempt_complaint']
---
objects:
  - organize_tenants_attachment: ALStaticDocument.using(title="Organize tenants", filename="lt1-pullout-10-getting-organized.pdf")
  - sue_your_landlord_attachment: ALStaticDocument.using(filename="lt1-pullout-13-taking-landlord-to-court.pdf", title="Sue your landlord")
  - organize_tenants_attachment: ALDocument.using(title="Organize!", filename="lt1-pullout-10-getting-organized")
  - sue_your_landlord_attachment: ALDocument.using(title="Sue your Landlord", filename="sue_your_landlord")
  - request_housing_inspection_attachment: ALDocument.using(title="Letter to Request Housing Inspection", filename="inspection_request")
  - letter_to_notify_landlord_instructions_attachment: ALDocument.using(title="Instructions - Letter to tell landlord about housing problems", filename="instructions_notice_letter")
  - conditions_report_attachment: ALDocument.using(title="Housing Conditions Report", filename="housing_conditions_report")
  - request_housing_inspection_instructions_attachment: ALDocument.using(title="Instructions - Letter to Request Housing Inspection", filename="inspection_request_instructions")
---
attachment:
  variable name: conditions_report_attachment[i]
  docx template file: Evidence_packet.docx
  language: en
---
attachment:
  variable name: request_housing_inspection_attachment[i]
  docx template file: letter_to_request_inspection.docx
  language: en
---
attachment:
  variable name: request_housing_inspection_instructions_attachment[i]
  docx template file: next_steps_inspection_request_letter.docx
---
attachment:
  variable name: letter_to_notify_landlord_instructions_attachment[i]
  docx template file: next_steps_request_for_repairs_letter.docx
---
code: |
  request_housing_inspection_instructions_attachment.enabled = request_housing_inspection_attachment.enabled
---
objects:
  - housing_code_bundle: ALDocumentBundle.using(elements=[
        conditions_report_attachment,
        organize_tenants_attachment,
        letter_to_notify_landlord_instructions_attachment,
        tenant_repair_request_attachment,
        request_housing_inspection_instructions_attachment,
        request_housing_inspection_attachment,
        sanitary_code_template_attachment,
        Repair_Demand_Letter_attachment,
      ],
      title="Your housing conditions toolkit", filename="housing_conditions_documents",
      )
  - tenant_repair_letter_bundle: ALDocumentBundle.using(elements=[
        letter_to_notify_landlord_instructions_attachment,
        tenant_repair_request_attachment
      ],
      title="Your repair request letter",
      filename="repair_request_letter",
      )
  - affirmative_complaint_bundle: ALDocumentBundle.using(elements=[
        verified_complaint_and_motions_post_interview_instructions,
        verified_complaint_and_motions_attachment,
        order_of_notice,
        temporary_order,
        contempt_complaint,
        affidavitofindigency_attachment,
      ], title="Documents to file in court and serve your landlord",
      filename="affirmative_complaint_documents",
      )
  - everything_for_emailing_bundle: ALDocumentBundle.using(elements=[
        verified_complaint_and_motions_attachment,
        temporary_order,
        order_of_notice,
        contempt_complaint,
        conditions_report_attachment,
        organize_tenants_attachment,
        letter_to_notify_landlord_instructions_attachment,
        tenant_repair_request_attachment,
        request_housing_inspection_instructions_attachment,
        request_housing_inspection_attachment,
        sanitary_code_template_attachment,
        Repair_Demand_Letter_attachment,
        affidavitofindigency_attachment,
      ], title="All documents for your records", filename="tenant_copy")
  - further_documents_bundle: ALDocumentBundle.using(elements=[
        temporary_order,
        order_of_notice,
        contempt_complaint,
      ], title="Documents for future case use",
      filename="further_documents",
      )
---
objects:
  - lsc_logo: DAStaticFile.using(filename="lsc_logo_horizontal.jpg")
  - mlac_logo: DAStaticFile.using(filename="mlac_logo.png")
---
event: about_this_interview
id: about made uptocode
question: |
  About MADE: UpToCode
subquestion: |
  ${ about_this_interview_version_info }
back button label: |
  Back to questions
---
template: about_this_interview_version_info
content: |
  MADE: UpToCode is a free website that gives tenants the power to solve
  landlord problems. It's funded by the national Legal Services Corporation and
  Massachusetts nonprofits.

  UpToCode includes a translated and easy to read English version of the Massachusetts
  Sanitary Code, the law that lists the requirements that Massachusetts landlords
  must follow. It helps tenants:
  
  1. discover their rights under the law,
  1. report problems to their landlord, a city housing inspector, or the court,
  1. get a court order to enforce repairs or to get compensation for illegal landlord
  actions.

  UpToCode was originally authored by Quinten Steenhuis in 2021 in
  partnership with [Massachusetts Law Reform Institute](https://mlri.org) as
  part of the COVID Eviction Legal Help Project legal services component.

  In 2022, the [Legal Services Corporation](https://lsc.gov) and [Northeast
  Legal Aid](https://northeastlegalaid.org) funded a major revision with new
  features, including the ability to file a complaint in court.

  UpToCode is generously hosted by [Greater Boston Legal Services](https://gbls.org).
  
  Community organizations [La Colaborativa](https://la-colaborativa.org) and
  [Lynn United for Change](https://lynnunited.org) played a special role in
  co-design of this website.

  &copy; 2022 Northeast Legal Aid, Quinten Steenhuis and open source
  contributors under an [MIT license](https://opensource.org/licenses/MIT).  

  % if all_variables(special='metadata').get('authors'):
  Additional authors of work incorporated within UpToCode include: ${
  comma_and_list(all_variables(special='metadata').get('authors')) }.
  % endif
  
  "${all_variables(special='metadata').get('title','').rstrip()}" includes code
  from the [Document Assembly Line
  project](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/).

  "${all_variables(special='metadata').get('title','').rstrip()}" version 
  `${ package_version_number }`; AssemblyLine version `${ al_version }`.
  
  % if package_updated_on:
  Last updated on ${ package_updated_on }. [:fab-fa-github: View code on
  GitHub](${ github_url }).
  % endif

  <a href="https://www.lsc.gov/"><img src="${ lsc_logo.url_for() }" style="max-width: 80%" alt="Legal Services Corporation logo"/></a>

  <a href="https://www.mlac.org/"><img src="${ mlac_logo.url_for() }" alt="Massachusetts Legal Assistance Corporation logo"/></a>
