---
translations:
  - housing_code_interview_es.xlsx
---
include:
  - docassemble.AssemblyLine:al_package.yml
  #- docassemble.MAHousingTRO:housing_tro_to_include.yml   
  - docassemble.SanitaryCode:sanitary_code_template.yml
  - docassemble.RentalRepairLetter:Repair_Letter_Tenant.yml
  #- docassemble.RentWitholdingLetter:tenant_rent_withholding_letter.yml
  - customized_screens.yml 
  - language.yml 
---
metadata:
  title: |-
    MADE: UpToCode
  authors:
    - Quinten Steenhuis
    - Michael Cronin
    - Joelle Ataya
    - Cherise Barandao
    - Christopher Selak    
    - Michael Carroll
    - Maeve MacGlinchey
    - Caroline Robinson
    - Plocket
    - Kate Barry
    - Lily Yang
    - Matthew Brooks
    - Lance Godard
    - Kendall Garner
    - David Colarusso    
  logo: |
    <i class="fas fa-house-damage"></i><div class="title"> MADE: UpToCode</div>
  tags:
    - HO-00-00-00-00
comment: |
  Some of the documents that this interview assembles
  use work done as part of the Assembly Line project.
---
id: patch pre-1.4.8 bug
mandatory: True
code: |
  if task_not_yet_performed('erase_none'):
    if defined('bad_conditions') and None in bad_conditions:
      del bad_conditions[None]
    mark_task_as_performed('erase_none')
---
language: en
comment: |
  Section labels for child interviews that have follow-up
  questions
variable name: sub_documents
data: !!omap
  - get_report:
      section_link: review_checklist
      section_label: My checklist
      name: Housing Code Checklist and Condition Report
      count: 2
  - tell_landlord: 
      section_link: review_tenant_repair_request
      section_label: Tell my landlord
      name: Letter to landlord to report bad conditions
      count: 2
  - share_with_tenants:
      section_link: review_share_with_tenants
      section_label: Tell other tenants
      name: Share your information with other tenants
      count: 0
  - organize_tenants:
      section_link: organizing_interstitial
      section_label: Organize    
      name: Organize with other tenants
      count: 0
  - get_inspection: 
      section_link: review_request_housing_inspection
      section_label: Get an inspection
      name: Request a city inspection
      count: 2
  #- enforce_inspection: 
  #    section_link: review_sanitary_code_template
  #    section_label: Enforce an inspection
  #    name: Ask a judge to enforce a city inspection
  #    count: 2
  - fix_problems:
      section_link: review_repair_and_deduct
      section_label: Fix the problems myself
      name: Make repairs and deduct the cost from my rent
      count: 0
  #- get_injunction:
  #    section_link: review_housing_tro
  #    section_label: Get a judge's order
  #    name: Ask a judge for an injunction (order)
  #    count: 8
  #- sue_landlord:
  #    section_link: review_sue_landlord
  #    section_label: Sue my landlord
  #    name: Sue my landlord in court
  #    count: 0
---
language: en
sections:
  - section_getting_started: Getting started
  - review_conditions: List problems
  - document_choice: Choose a solution
  - provide_details: Answer questions
  - preview_and_sign: Preview and sign
  - download_conditions_checklist_docs: Download
auto open: True  
---
modules:
  - .load_data
  - docassemble.ALToolbox.misc  
---
mandatory: True
id: interview order
code: |
  intro
  users[0].name.first
  starting_task
  nav.set_section('review_conditions')        
  bad_conditions.gather()
  if bad_conditions.count_conditions() > 0:
    # This is a bit of a workaround
    for room in bad_conditions:
      for condition in bad_conditions[room].claims.true_values():
        bad_conditions[room].details[condition].condition_existed_at_start  
    review_conditions
  else:
    warn_add_conditions
  nav.set_section('document_choice')
  screen_ll_knows_problem
  nav.set_section('provide_details')  
  if not screen_ll_knows_problem:
    update_sections_with_selected_documents
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    users[0].address.address
    users[0].address.geocode()
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    organizing_interstitial
  else:
    explain_documents
    update_sections_with_selected_documents  
  if screen_ll_knows_problem and document_choice['get_report']:
    nav.set_section(sub_documents['get_report'].get('section_link'))
    users[0].address.address
    other_parties.gather()
    other_parties[0].address.address
  if screen_ll_knows_problem and document_choice['tell_landlord']:
    nav.set_section(sub_documents['tell_landlord'].get('section_link'))
    interview_order_tenant_repair_request
  if screen_ll_knows_problem and document_choice['share_with_tenants']:
    nav.set_section(sub_documents['share_with_tenants'].get('section_link'))
    explain_sharing
    store_for_tenant_sharing
  if screen_ll_knows_problem and document_choice['organize_tenants']:
    nav.set_section(sub_documents['organize_tenants'].get('section_link'))
    users[0].address.address
    users[0].address.geocode()
    organizing_interstitial
  if screen_ll_knows_problem and document_choice['get_inspection']:
    nav.set_section(sub_documents['get_inspection'].get('section_link'))
    interview_order_request_housing_inspection
  #if screen_ll_knows_problem and screen_contacted_housing_inspector and document_choice.get('enforce_inspection'):
  #  nav.set_section(sub_documents['enforce_inspection'].get('section_link'))
  #  sanitary_code_template
  # if screen_ll_knows_problem and document_choice['get_injunction']:
  #   nav.set_section(sub_documents['get_injunction'].get('section_link'))
  #   interview_order_Housing_Temporary_Restraining_Order0002
  # if screen_ll_knows_problem and document_choice['sue_landlord']:
  #   nav.set_section(sub_documents['sue_landlord'].get('section_link'))
  # if screen_ll_knows_problem and {'enforce_inspection','get_inspection','get_injunction', 'tell_landlord'}.intersection(document_choice.true_values()):
  if screen_ll_knows_problem and {'enforce_inspection','get_inspection', 'tell_landlord'}.intersection(document_choice.true_values()):
     nav.set_section('preview_and_sign')
     preview_conditions_checklist_docs
     basic_questions_signature_flow
  nav.set_section('download_conditions_checklist_docs')
  download_conditions_checklist_docs
---
depends on:
  - user_language
  - screen_ll_knows_problem
  - document_choice
code: |
  new_sections = []
  if screen_ll_knows_problem:
    for document in sub_documents:
      if document in document_choice.true_values():
        new_sections.append({
          sub_documents[document].get('section_link'):  sub_documents[document].get('section_label')
        })
  else:
    new_sections.append({sub_documents['tell_landlord'].get('section_link'): sub_documents['tell_landlord'].get('section_label')})
  old_nav = nav.get_sections()
  
  position = 3 # Current, hardcoded position in the list
  position_label = 'Answer questions'
  for index, item in enumerate(old_nav):
    if next(iter(item)) == 'provide_details':
      position = index
      position_label = next(iter(item.values()))
  old_nav[position] = {position_label: new_sections}

  nav.set_sections(old_nav)

  update_sections_with_selected_documents = True
---
code: |
  store_variables_snapshot(
    {'landlord': other_parties[0].name.full(), 
     'address_street': users[0].address.address,
     'address_city': users[0].address.city,
     'address_zip': users[0].address.zip,
     'bad_conditions': bad_conditions}
     )
  store_for_tenant_sharing = True
---
id: launch made
continue button field: launch_made
question: |
  Stop your eviction
subquestion: |
  Click the link below to start using MADE, Massachusetts Defense
  for Eviction in a new window.
  
  When you are finished, you can come back here.
  
  ${ action_button_html('https://interviews.gbls.org/start/eviction', label='Launch MADE') } 
---
features:
  css:
    - docassemble.ALToolbox:collapse_template.css
    - styles.css
  javascript:
    - back_button.js
  #navigation: horizontal    
  small screen navigation: dropdown
  progress bar: False
---
objects:
  - dataloader: DataLoader.using(filename="housing_code_checklist.xlsx")
  - bad_conditions: ConditionsDict.using(there_are_any=True)
---
depends on:
  - bad_conditions[i].claims
code: |
  bad_conditions[i].claims
  bad_conditions[i].df
  for condition in bad_conditions[i].claims.true_values():
    bad_conditions[i].details[condition].condition_existed_at_start
  bad_conditions[i].complete = True
---
code: |  
  bad_conditions[i].details[j].condition_existed_at_start
  bad_conditions[i].details[j].complete = True
---
#features:
#  question back button: False
---
id: intro
question: |
  You deserve a safe and decent home
subquestion: |  
  Everyone has a right to a safe home--**without** any bad housing conditions.
  This website will help you find out if your home is safe according to the
  [state sanitary
  code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download).
  It will help you get the repairs that you need.

  ${ collapse_template(what_problems_can_be_solved) }
      
  #### This website is safe to use
  
  It is illegal for your landlord to do anything to harm you because you ask for
  repairs. Your landlord cannot raise your rent or try to evict you because you
  tell them about things that need to be repaired. [Read
  more](https://www.masslegalhelp.org/when-is-eviction-illegal).
    
  :clock: Most tenants take about 20 minutes to use this website.
continue button field: intro
right: |-
  **If you are being evicted**[BR]  
  Use the free [MADE](https://interviews.gbls.org/start/eviction)
  website to fight your eviction.
  
  ${ action_button_html(url_ask('launch_made'), label="I am being evicted") }
fields:
  - To continue, you must accept the [terms of use](https://www.gbls.org/self-help/eviction/terms-of-use): acknowledged_information_use
    datatype: checkboxes
    none of the above: False    
    minlength: 1
    choices:
      - I accept the terms of use.
    validation messages:
      minlength: |
        You cannot continue unless you agree to the terms of use.        
---
template: what_problems_can_be_solved
subject: |-
  What can I do?
content: |-
  You can choose what to do. We can help you:

  * Let your landlord know about the problem.
  * Call a housing inspector.
  * Ask a judge to order your landlord to fix the problems.
  * Sue your landlord in court.
  
  ${ action_button_html(url_action('learn_more'), label="Read more first") }  
---
id: intro affirmation
question: |
  ${ users.familiar() }, you can do this!
subquestion: |  
  #### How this works
  
  This website will help you solve problems with bad conditions in your home.
  <div class="custom-counter">
  <ol class="custom-counter">
  <li>Read about your landlord's responsibilities.</li>
  <li>Track the problems you have in each room of your home.</li>
  <li>Upload photos or add other information about each problem.</li>
  <li>Choose a next step to get your landlord to fix the problems.</li>
  </ol>
  </div>
  
  ${ collapse_template(what_problems_can_be_solved) }
  
continue button field: starting_task  
continue button label: Get started
css: |
  <style>
    .custom-counter ol {
    margin: 0;
    padding: 0;
    list-style-type: none;
    }

    .custom-counter li {
    counter-increment: step-counter;
    margin-bottom: 10px;
    }

    .custom-counter li::before {
    content: counter(step-counter);
    margin-right: 5px;
    font-size: 80%;
    background-color: black;
    color: white;
    font-weight: bold;
    padding: 3px 8px;
    border-radius: 50%;
    }
  </style>  

---
id: track conditions intro
question: |
  Track your housing problems
subquestion: |
  This website will help you track.
continue button field: track_conditions_intro  
---
id: learn more
question: |
  Solve your housing problems
subquestion: | 
  ${ collapse_template(how_to_defend_eviction_template) }
  ${ collapse_template(how_to_document_template) }
  ${ collapse_template(how_to_notify_landlord_template) }
  ${ collapse_template(get_inspection_template) }
#  ${ collapse_template(get_injunction_template) }
#  ${ collapse_template(sue_your_landlord_template) } 
continue button field: learn_more
---  
id: room chooser
question: |
  Your landlord's responsibilities
subquestion: |
  % if len(bad_conditions):
  You have already listed problems in these rooms:
  
  % for button in bad_conditions:
  * [:pencil-alt: ${ str(button).capitalize() }](${ url_action('bad_conditions["' + button + '"].claims') } )
  % endfor
  % else:
  Your home is protected by the [state sanitary 
  code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download). 
  Click the buttons below to learn what a safe home means in different categories.
  % endif
field: bad_conditions.new_item_name
buttons:
  code: |
    [button for button in available_buttons if next(iter(button)) not in bad_conditions ]
back button label: |
  Back
post: |
  % if len(bad_conditions.elements):
  ${ action_button_html(url_ask('set_gathered'), label="Skip and continue", color="primary", size="md") }
  % endif
---
code: |
  bad_conditions.gathered = True
  set_gathered = True
---
depends on:
  - user_language
language: en
variable name: available_buttons
data:
  - emergency: Emergency
    image: first-aid
  - Safety: Safety
    image: unlock-alt    
  - Exits: Exits
    image: door-open
  - Heat: Heating
    image: thermometer-full
  - Bathroom: Bathroom
    image: bath
  - Kitchen: Kitchen
    image: utensils    
  - Lighting: Lighting
    image: lightbulb    
  - Electricity and Gas: Electricity and Gas
    image: plug
  - Water: Water
    image: faucet    
  - Garbage: Garbage
    image: trash-alt
  - Lead paint: Lead Paint
    image: paint-roller
  - Rodents and insects: Rodents and insects
    image: bug
  - Space: Space
    image: house-user
  - Ventilation and Light: Ventilation and light
    image: sun
  - Building Structure: Building Structure
    image: hard-hat        
  - General Maintenance: General maintenance
    image: tools
---
if: |
  i == 'emergency'
undefine:
  - bad_conditions[i].df  
  - bad_conditions[i].complete
id: Claims
question: |
  Emergency problems
subquestion: |
  Your landlord should start fixing any problem listed below within 24 hours
  of learning about the problem.
  
  If you do not see your problem listed below, try a different category.
fields:
  - no label: bad_conditions[i].claims
    datatype: checkboxes
    required: False
    code: |
      conditions_with_help(dataloader, "24 hours", search_column="Deadline", language=user_language)
    default:
      code: |
        bad_conditions[i].claims.true_values() if defined('bad_conditions[i].claims') else []
help: 
  label: |
    Sanitary Code
  content: |
    The problems listed above are cited in the following sections of the
    [sanitary code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
        
    Problem | Sanitary Code
    --------|------------------
    % for row in dataloader.get_rows(allowed_types=["24 hours"], filter_column="Deadline").iterrows():
    ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] }
    % endfor
---
if:
  i != 'emergency'
undefine:
  - bad_conditions[i].df
  - bad_conditions[i].complete  
id: Non-emergency claims
question: |
  Problems with ${ i }
fields:
  - no label: bad_conditions[i].claims
    datatype: checkboxes
    required: False
    code: |
      conditions_with_help(dataloader, i, language=user_language)
    default:
      code: |
        bad_conditions[i].claims.true_values() if defined('bad_conditions[i].claims') else []
help: 
  label: |
    Sanitary Code
  content: |
    The problems listed above are cited in the following sections of the
    [sanitary code](https://www.mass.gov/doc/105-cmr-410-state-sanitary-code-chapter-ii-minimum-standards-of-fitness-for-human-habitation/download):
        
    Problem | Sanitary Code
    --------|------------------
    % for row in dataloader.get_rows(allowed_types=[i], filter_column="Category").iterrows():
    ${ row[1]['Interview description'] } | ${ row[1]['Sanitary Code Section'] }
    % endfor        
---
id: there is another condition
question: |
  Do you want to list problems in another category?
subquestion: |
  So far you have reviewed problems in ${ comma_and_list([f'"{str(key).capitalize()}"' for key in bad_conditions.keys()]) }.
  
  Tap "yes" if you want to look at problems in another category.
yesno: bad_conditions.there_is_another
---
code: |
  if len(bad_conditions.complete_elements()) >= len(available_buttons): 
    bad_conditions.there_is_another = False
---
depends on:
  - bad_conditions[i].claims
code: |
  bad_conditions[i].df = dataloader.load_rows(bad_conditions[i].claims.true_values())
---
continue button field: review_conditions
id: review conditions
question: |
  Here is what you told us so far
subquestion: |  
  ${ review_conditions_template }
---
template: review_conditions_template
content: |
  % if len(bad_conditions.elements): 
  Click a category below to revisit your choices.
  Click a problem to edit the time the problem started, upload evidence,
  and make other changes.
  
  % for category in bad_conditions.elements:
  #### [:pencil-alt: ${ category.title() if not category is None else 'None' }](${ url_action('bad_conditions["' + str(category) + '"].claims') })
  
  % for index, row in bad_conditions[category].df.iterrows():
  * [:pencil-alt: ${ row['Interview description'] }](${ url_action(f'bad_conditions["{str(category)}"].details["{str(index)}"].condition_existed_at_start')})
  % endfor
  % endfor
  % endif
  
  % if len(bad_conditions) < len(available_buttons):
  ${ bad_conditions.add_action() }
  % endif
---
event: warn_add_conditions
question: |
  You haven't added any problems yet
subquestion: |
  You should add at least one problem to continue.
  % if len(bad_conditions): 
  
  Click a category below to revisit your selections.  
  % endif  
  % for category in bad_conditions:
  #### [${ category.title() if not category is None else 'None' }](${ url_action('bad_conditions["' + str(category) + '"].claims') })
  
  % for index, row in bad_conditions[category].df.iterrows():
  * ${ row['Interview description'] }
  % endfor
  % endfor  
  
  % if len(bad_conditions) < len(available_buttons):
  ${ bad_conditions.add_action() }
  % endif
---
id: triage
question: |
  Deciding on your next steps
fields:
  - Does your landlord already know about at least one of the problems in your home?: screen_ll_knows_problem
    datatype: yesnoradio
  - note: |
      **Okay.** Your first step should be to tell your landlord about the
      problem. We can help you write a letter to tell your landlord and put
      them on legal notice.
    show if:
      variable: screen_ll_knows_problem
      is: False
  - Is your landlord refusing to fix the problems?: screen_ll_refusing_to_fix
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **You may want to give your landlord time.** Some serious problems
      need to be fixed in 24 hours, and others in 5 days. Other problems
      can be fixed in up to 30 days.
      
      If you have not given your landlord enough time to fix the problem yet,
      you may want to wait before you get help from a court. But it is up
      to you.
    show if:
      variable: screen_ll_refusing_to_fix
      is: False
  - Are other tenants in your building also having housing problems?: screen_other_tenants_with_problem
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **${ users.familiar() }, you and your neighbors are stronger together**. You have the right to **organize**
      with other tenants to fight the bad housing conditions.
    show if: screen_other_tenants_with_problem
  - Have you requested an inspection from the city about the most recent problem?: screen_contacted_housing_inspector       
    datatype: yesnoradio
    show if: screen_ll_knows_problem
  - note: |
      **You may want to get an inspection.** You are not required to get a
      housing inspection. But it can help a judge understand the problems
      better. You do not need to wait for the inspection to get more help.
    show if:
      variable: screen_contacted_housing_inspector
      is: False
  - note: |
      **What would you like to do?**    
      Remember, you have the right not to be {retaliated} against.
    show if: screen_ll_knows_problem      
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_ll_knows_problem") && val("screen_contacted_housing_inspector")
    choices:
      - Save or print a copy of my checklist for later: get_report
      - Tell my landlord about the problems: tell_landlord
      - Organize with my neighbors or other tenants in my city: organize_tenants
      - Let other tenants know about my bad landlord: share_with_tenants
        help: |
          This will share your address and landlord's name, but not your name
          or apartment number.
      - Get a city inspection: get_inspection
      # - Withhold rent: withhold_rent
      #- Fix the problems myself and deduct money from my rent: fix_problems
      # TODO(41): low priority
      #- Ask a judge to enforce an order from a housing inspector: enforce_inspection
      #- Ask a judge to order my landlord to fix the problem: get_injunction
      #- Sue my landlord for money: sue_landlord
    default:
      - get_report
  - no label: document_choice
    required: False
    datatype: checkboxes
    js show if: |
      val("screen_ll_knows_problem") && !val("screen_contacted_housing_inspector")
    choices:
      - Save or print a copy of my checklist for later: get_report
      - Tell my landlord about the problems: tell_landlord
      - Organize with my neighbors or other tenants in my city: organize_tenants
      - Let other tenants know about my bad landlord: share_with_tenants
        help: |
          This will share your address and landlord's name, but not your name
          or apartment number.
      - Get a city inspection: get_inspection
      # - Withhold rent: withhold_rent
      #- Fix the problems myself and deduct money from my rent: fix_problems
      #- Ask a judge to order my landlord to fix the problem: get_injunction
      #- Sue my landlord for money: sue_landlord
    none of the above: False
    default:
      - get_report

validation code: |
  if screen_ll_knows_problem and len(document_choice.true_values()) < 1:
    validation_error("Select at least one.", field="document_choice")
terms:
  retaliated: |
    Retaliation could include evicting you or raising your rent because you
    complained about housing problems. Retaliation is illegal and you have
    protections in a court.
---
id: interview_order_request_housing_inspection
code: |
  users[0].name.first
  users[0].address.address
  users[0].address.geocode()
  other_parties[0].name.first
  other_parties[0].address.address
  interview_order_request_housing_inspection = True
---
id: preview_conditions_checklist_docs
continue button field: preview_conditions_checklist_docs
question: |
  Review your documents before you sign
subquestion: |
  Tap to open the document below in a new window.
  
  If you need to make any changes, tap the navigation labels
  to revisit the section you want to change.
  
  When you are ready, click "next" to add your signature.
  
  % if screen_ll_knows_problem:
  ${ housing_code_bundle.as_pdf(key='preview') }

  % else:
  ${ tenant_repair_letter_bundle.as_pdf(key='preview') }
  
  % endif
---
id: download_conditions_checklist_docs
event: download_conditions_checklist_docs
question: |
  Your documents are ready
subquestion: |
  
  1. Download and print your documents below. You can also send yourself
  or someone else a copy of the documents in an email.
  1. Read the instructions to learn how to file and deliver your
  documents.
  % if defined('trial_court'):
  1. Deliver the court forms to the ${ trial_court } at ${ trial_court.address.on_one_line() }. You can call for instructions at ${ tel(trial_court.phone_number) }.
  % endif
  1. You can come back to this website later to take additional steps.

  % if screen_ll_knows_problem:
  ${ housing_code_bundle.download_list_html(format="docx") }

  ${ housing_code_bundle.send_button_html() }
  % else: 
  ${ tenant_repair_letter_bundle.download_list_html(format="docx") }
  
  ${ tenant_repair_letter_bundle.send_button_html() }
  % endif  
---
id: details for this claim
question: |
  More information about "${ bad_conditions[i].df.loc[j]['Interview description'].lower().lstrip() }"
fields:
  - This problem was there when I moved in: bad_conditions[i].details[j].condition_existed_at_start
    datatype: yesno
  - Date this problem started: bad_conditions[i].details[j].start_date
    max: ${ today().format("yyyy-MM-dd") }
    datatype: date
    help: |
      Use the month and year if that is the best that you know.
    hide if: bad_conditions[i].details[j].condition_existed_at_start    
  - The problem is fixed: bad_conditions[i].details[j].condition_ended
    datatype: yesno
  - Date problem ended: bad_conditions[i].details[j].end_date
    max: ${ today().format("yyyy-MM-dd") }  
    datatype: date
    show if: bad_conditions[i].details[j].condition_ended
  - Describe the problem using your own words: bad_conditions[i].details[j].description
    datatype: area
    required: False
  - Add a photo or other proof of the problem, if you have it: bad_conditions[i].details[j].files
    datatype: files
    required: False
    image upload type: jpeg        
    accept: |
      "image/*,image/png,image/jpeg,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/pdf,.pdf"       
---    
id: names of opposing parties
question: |
  What is your landlord's name?

fields:
  - I do not know my landlord's name: ll_name_unknown
    datatype: yesno
  - note: |
      **Okay**. You can still fill in this form, but you will need
      to write in your landlord's name on every form before you deliver
      it. You may be able to find their name by visiting the Registry of
      Deeds for your city or town.
    show if: ll_name_unknown
  - Are they a person, or a business?: other_parties[0].person_type
    input type: radio
    choices:
      - Business or organization: business
      - Person: individual
    hide if: ll_name_unknown      
  - First name: other_parties[0].name.first
    show if:
      variable: other_parties[0].person_type
      is: "individual"
  - Last name: other_parties[0].name.last
    show if:
      variable: other_parties[0].person_type      
      is: "individual"
  - Suffix: other_parties[0].name.suffix
    code: |
      name_suffix()
    show if:
      variable: other_parties[0].person_type      
      is: "individual"
    required: False      
  - Name of organization or business: other_parties[0].name.first
    show if:
      variable: other_parties[0].person_type
      is: business
validation code: |
  if ll_name_unknown:
    other_parties[0].name.first = "[ Landlord's Name ]"
---
id: your address
question: |
  What is your landlord's address?
fields:
  - I do not know my landlord's address: ll_address_unknown
    datatype: yesno
  - note: |
      **Okay**. You need your landlord's address for many of the forms on
      this website. You can still finish this form but you will need to add
      your landlord's address before you deliver the form.
    show if: ll_address_unknown       
  - Street address: other_parties[0].address.address
    address autocomplete: True
    hide if: ll_address_unknown
  - Unit: other_parties[0].address.unit
    required: False
    hide if: ll_address_unknown    
  - City: other_parties[0].address.city
    hide if: ll_address_unknown  
  - State: other_parties[0].address.state
    hide if: ll_address_unknown  
    code: |
      states_list()
    default: MA      
  - Zip: other_parties[0].address.zip
    required: False
    hide if: ll_address_unknown
validation code: |
  if ll_address_unknown:
    other_parties[0].address.address = "[ Landlord's address ]"
    other_parties[0].address.city = "[ Landlord's city ]"
---
id: explain_documents
continue button field: explain_documents
question: |
  We may have a few more questions
subquestion: |
  On the next screens, we will ask whatever questions are needed to finish
  creating the documents that you asked for. 
  
  At the end, you will have a chance to download and email the documents for
  yourself or send them to someone else.
---
continue button field: explain_sharing
question: |
  Thank you for sharing your information
subquestion: |
  Your name and apartment number will stay private.
---
event: review_checklist
question: |
  Edit answers on your housing code checklist
review:
  - Edit: users[0].name.first
    button: |
      Your name: ${ users[0] }
  - Edit: review_conditions
    button: |
      ${ review_conditions_template }
  - Edit: users[0].address.address
    button: |
      Your address: ${ users[0].address_block() }      
  - Edit: other_parties[0].name.first
    button: |
      Your landlord's name: ${ other_parties[0] }
  - Edit: other_parties[0].address.address
    button: |
      Your landlord's address: ${ other_parties[0].address.address }
---
code: |
  package_name = "docassemble-HousingCodeChecklist"
  github_user = "nonprofittechy"
  feedback_form = user_info().package + ":feedback.yml"
---
code: |
  organize_tenants_attachment.enabled = screen_ll_knows_problem and document_choice['organize_tenants'] 
---
code: |
  checklist_attachment.enabled = action_argument('enabled') or screen_ll_knows_problem and document_choice['get_report']
---
code: |
  conditions_report_attachment.enabled = action_argument('enabled') or screen_ll_knows_problem and document_choice['get_report']
---
code: |
  request_housing_inspection_attachment.enabled = screen_ll_knows_problem and document_choice['get_inspection']
---
depends on:
  - sue_your_landlord_attachment
  - document_choice['sue_landlord']
code: |
  sue_your_landlord_attachment.enabled = screen_ll_knows_problem and document_choice['sue_landlord']
---
code: |
  tenant_repair_request_attachment.enabled = not screen_ll_knows_problem or document_choice['tell_landlord']
---
code: |
  sanitary_code_template_attachment.enabled = screen_ll_knows_problem and screen_contacted_housing_inspector and document_choice.get('enforce_inspection') and inspection
---
code: |
  Housing_Temporary_Restraining_Order0002_attachment.enabled = screen_ll_knows_problem and document_choice['get_injunction']
---
objects:
  - organize_tenants_attachment: ALStaticDocument.using(title="Organize tenants", filename="lt1-pullout-10-getting-organized.pdf")
  - sue_your_landlord_attachment: ALStaticDocument.using(filename="lt1-pullout-13-taking-landlord-to-court.pdf", title="Sue your landlord")
  - organize_tenants_attachment: ALDocument.using(title="Organize!", filename="lt1-pullout-10-getting-organized")
  - sue_your_landlord_attachment: ALDocument.using(title="Sue your Landlord", filename="sue_your_landlord")
  - request_housing_inspection_attachment: ALDocument.using(title="Letter to Request Housing Inspection", filename="inspection_request")
  - checklist_attachment: ALDocument.using(title="Housing Code Checklist", filename="housing_code_checklist")
  - conditions_report_attachment: ALDocument.using(title="Housing Conditions Report", filename="housing_conditions_report")
---
attachment:
  variable name: checklist_attachment[i]
  docx template file: Housing_Code_Checklist.docx
  language: en
---
attachment:
  variable name: conditions_report_attachment[i]
  docx template file: Evidence_packet.docx
  language: en
---
attachment:
  variable name: request_housing_inspection_attachment[i]
  docx template file: letter_to_request_inspection.docx
  language: en
---
#      checklist_attachment,
# sue_your_landlord_attachment,
#       sanitary_code_template_attachment,
# Housing_Temporary_Restraining_Order0002_attachment
objects:
  - housing_code_bundle: ALDocumentBundle.using(elements=[
      conditions_report_attachment,
      organize_tenants_attachment,      
      tenant_repair_request_attachment,
      request_housing_inspection_attachment,
      ],
      title="Your housing conditions toolkit", filename="housing_conditions_documents")
  - tenant_repair_letter_bundle: ALDocumentBundle.using(elements=[tenant_repair_request_attachment],
      title="Your repair request letter",
      filename="repair_request_letter")
---
template: about_this_interview_version_info
content: |
  "${all_variables(special='metadata').get('title','').rstrip()}" version 
  `${ package_version_number }`; AssemblyLine version `${ al_version }`.
  
  % if package_updated_on:
  Last updated on ${ package_updated_on }. [:fab-fa-github: View code on GitHub](${ github_url }).  
  % endif

  [Submit feedback](${ interview_url(i=feedback_form, github_repo=github_repo_name, github_user=github_user, variable=user_info().variable, question_id=user_info().question_id, package_version=package_version_number, local=False,reset=1) } ){:target="_blank"}.

  % if all_variables(special='metadata').get('authors'):
  This form was authored by ${ comma_and_list(all_variables(special='metadata').get('authors')) }.
  % endif
  
  "${all_variables(special='metadata').get('title','').rstrip()}" includes code 
  from the [Document Assembly Line project](https://suffolklitlab.org/docassemble-AssemblyLine-documentation/docs/). 
  
  &copy; 2021 Quinten Steenhuis and open source contributors.